/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Object = System.Object;
using InvalidOperationException = System.InvalidOperationException;
using Exception = System.Exception;
using ArgumentNullException = System.ArgumentNullException;
using SystemEventHandler = System.EventHandler;
using DateTimeOffset = System.DateTimeOffset;
using Guid = System.Guid;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Horizon.Sdk.Client;
using Finbourne.Horizon.Sdk.Client.Auth;
using Finbourne.Horizon.Sdk.Model;

namespace Finbourne.Horizon.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstrumentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors.
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onboardInstrumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OnboardInstrumentResponse</returns>
        OnboardInstrumentResponse CreateInstrument(OnboardInstrumentRequest onboardInstrumentRequest, int operationIndex = 0);

        /// <summary>
        /// [EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onboardInstrumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OnboardInstrumentResponse</returns>
        ApiResponse<OnboardInstrumentResponse> CreateInstrumentWithHttpInfo(OnboardInstrumentRequest onboardInstrumentRequest, int operationIndex = 0);
        /// <summary>
        /// [EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data.
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorProductKey"></param>
        /// <param name="identifiers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnrichmentResponse</returns>
        EnrichmentResponse EnrichInstrument(string vendorProductKey, Identifiers identifiers, int operationIndex = 0);

        /// <summary>
        /// [EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorProductKey"></param>
        /// <param name="identifiers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnrichmentResponse</returns>
        ApiResponse<EnrichmentResponse> EnrichInstrumentWithHttpInfo(string vendorProductKey, Identifiers identifiers, int operationIndex = 0);
        /// <summary>
        /// [EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AllowedParameterValue&gt;</returns>
        List<AllowedParameterValue> GetOpenFigiParameterOption(OpenFigiParameterOptionName parameterName, int operationIndex = 0);

        /// <summary>
        /// [EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AllowedParameterValue&gt;</returns>
        ApiResponse<List<AllowedParameterValue>> GetOpenFigiParameterOptionWithHttpInfo(OpenFigiParameterOptionName parameterName, int operationIndex = 0);
        /// <summary>
        /// [EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query.
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The execution ID returned by a previous query</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PermIdData&gt;</returns>
        List<PermIdData> RetrievePermIdResult(string id, int operationIndex = 0);

        /// <summary>
        /// [EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The execution ID returned by a previous query</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PermIdData&gt;</returns>
        ApiResponse<List<PermIdData>> RetrievePermIdResultWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// [EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms.
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="usePermId">Should also search PermId for additional information, defaults to &#x60;false&#x60;.</param>
        /// <param name="limit">Only affects results rom OpenFigi general text search (optional, default to 25)</param>
        /// <param name="marketSector">The market sector to search, defaults to &#x60;All&#x60;. (optional, default to &quot;All&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OpenFigiSearchResult</returns>
        OpenFigiSearchResult SearchOpenFigi(string query, bool usePermId, int? limit = default(int?), string? marketSector = default(string?), int operationIndex = 0);

        /// <summary>
        /// [EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="usePermId">Should also search PermId for additional information, defaults to &#x60;false&#x60;.</param>
        /// <param name="limit">Only affects results rom OpenFigi general text search (optional, default to 25)</param>
        /// <param name="marketSector">The market sector to search, defaults to &#x60;All&#x60;. (optional, default to &quot;All&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OpenFigiSearchResult</returns>
        ApiResponse<OpenFigiSearchResult> SearchOpenFigiWithHttpInfo(string query, bool usePermId, int? limit = default(int?), string? marketSector = default(string?), int operationIndex = 0);
        /// <summary>
        /// [EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type.
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketSector"></param>
        /// <param name="securityType"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;VendorProduct&gt;</returns>
        List<VendorProduct> Vendors(string marketSector, string securityType, int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// [EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketSector"></param>
        /// <param name="securityType"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;VendorProduct&gt;</returns>
        ApiResponse<List<VendorProduct>> VendorsWithHttpInfo(string marketSector, string securityType, int? limit = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstrumentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onboardInstrumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OnboardInstrumentResponse</returns>
        System.Threading.Tasks.Task<OnboardInstrumentResponse> CreateInstrumentAsync(OnboardInstrumentRequest onboardInstrumentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onboardInstrumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OnboardInstrumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnboardInstrumentResponse>> CreateInstrumentWithHttpInfoAsync(OnboardInstrumentRequest onboardInstrumentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorProductKey"></param>
        /// <param name="identifiers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnrichmentResponse</returns>
        System.Threading.Tasks.Task<EnrichmentResponse> EnrichInstrumentAsync(string vendorProductKey, Identifiers identifiers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorProductKey"></param>
        /// <param name="identifiers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnrichmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnrichmentResponse>> EnrichInstrumentWithHttpInfoAsync(string vendorProductKey, Identifiers identifiers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AllowedParameterValue&gt;</returns>
        System.Threading.Tasks.Task<List<AllowedParameterValue>> GetOpenFigiParameterOptionAsync(OpenFigiParameterOptionName parameterName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AllowedParameterValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AllowedParameterValue>>> GetOpenFigiParameterOptionWithHttpInfoAsync(OpenFigiParameterOptionName parameterName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The execution ID returned by a previous query</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PermIdData&gt;</returns>
        System.Threading.Tasks.Task<List<PermIdData>> RetrievePermIdResultAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The execution ID returned by a previous query</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PermIdData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PermIdData>>> RetrievePermIdResultWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="usePermId">Should also search PermId for additional information, defaults to &#x60;false&#x60;.</param>
        /// <param name="limit">Only affects results rom OpenFigi general text search (optional, default to 25)</param>
        /// <param name="marketSector">The market sector to search, defaults to &#x60;All&#x60;. (optional, default to &quot;All&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OpenFigiSearchResult</returns>
        System.Threading.Tasks.Task<OpenFigiSearchResult> SearchOpenFigiAsync(string query, bool usePermId, int? limit = default(int?), string? marketSector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="usePermId">Should also search PermId for additional information, defaults to &#x60;false&#x60;.</param>
        /// <param name="limit">Only affects results rom OpenFigi general text search (optional, default to 25)</param>
        /// <param name="marketSector">The market sector to search, defaults to &#x60;All&#x60;. (optional, default to &quot;All&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OpenFigiSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OpenFigiSearchResult>> SearchOpenFigiWithHttpInfoAsync(string query, bool usePermId, int? limit = default(int?), string? marketSector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketSector"></param>
        /// <param name="securityType"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VendorProduct&gt;</returns>
        System.Threading.Tasks.Task<List<VendorProduct>> VendorsAsync(string marketSector, string securityType, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketSector"></param>
        /// <param name="securityType"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VendorProduct&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VendorProduct>>> VendorsWithHttpInfoAsync(string marketSector, string securityType, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstrumentApi : IInstrumentApiSync, IInstrumentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstrumentApi : IInstrumentApi
    {
        private Finbourne.Horizon.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstrumentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstrumentApi(string basePath)
        {
            this.Configuration = Finbourne.Horizon.Sdk.Client.Configuration.MergeConfigurations(
                Finbourne.Horizon.Sdk.Client.GlobalConfiguration.Instance,
                new Finbourne.Horizon.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Finbourne.Horizon.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Horizon.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Horizon.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstrumentApi(Finbourne.Horizon.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Horizon.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Horizon.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Horizon.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InstrumentApi(Finbourne.Horizon.Sdk.Client.ISynchronousClient client, Finbourne.Horizon.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Horizon.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Horizon.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Horizon.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Horizon.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Horizon.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Horizon.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onboardInstrumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OnboardInstrumentResponse</returns>
        public OnboardInstrumentResponse CreateInstrument(OnboardInstrumentRequest onboardInstrumentRequest, int operationIndex = 0)
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<OnboardInstrumentResponse> localVarResponse = CreateInstrumentWithHttpInfo(onboardInstrumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onboardInstrumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OnboardInstrumentResponse</returns>
        public Finbourne.Horizon.Sdk.Client.ApiResponse<OnboardInstrumentResponse> CreateInstrumentWithHttpInfo(OnboardInstrumentRequest onboardInstrumentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'onboardInstrumentRequest' is set
            if (onboardInstrumentRequest == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'onboardInstrumentRequest' when calling InstrumentApi->CreateInstrument");
            }

            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = onboardInstrumentRequest;

            localVarRequestOptions.Operation = "InstrumentApi.CreateInstrument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OnboardInstrumentResponse>("/api/instrument/onboarding/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onboardInstrumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OnboardInstrumentResponse</returns>
        public async System.Threading.Tasks.Task<OnboardInstrumentResponse> CreateInstrumentAsync(OnboardInstrumentRequest onboardInstrumentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<OnboardInstrumentResponse> localVarResponse = await CreateInstrumentWithHttpInfoAsync(onboardInstrumentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onboardInstrumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OnboardInstrumentResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Horizon.Sdk.Client.ApiResponse<OnboardInstrumentResponse>> CreateInstrumentWithHttpInfoAsync(OnboardInstrumentRequest onboardInstrumentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'onboardInstrumentRequest' is set
            if (onboardInstrumentRequest == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'onboardInstrumentRequest' when calling InstrumentApi->CreateInstrument");
            }


            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = onboardInstrumentRequest;

            localVarRequestOptions.Operation = "InstrumentApi.CreateInstrument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OnboardInstrumentResponse>("/api/instrument/onboarding/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorProductKey"></param>
        /// <param name="identifiers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnrichmentResponse</returns>
        public EnrichmentResponse EnrichInstrument(string vendorProductKey, Identifiers identifiers, int operationIndex = 0)
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<EnrichmentResponse> localVarResponse = EnrichInstrumentWithHttpInfo(vendorProductKey, identifiers);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorProductKey"></param>
        /// <param name="identifiers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnrichmentResponse</returns>
        public Finbourne.Horizon.Sdk.Client.ApiResponse<EnrichmentResponse> EnrichInstrumentWithHttpInfo(string vendorProductKey, Identifiers identifiers, int operationIndex = 0)
        {
            // verify the required parameter 'vendorProductKey' is set
            if (vendorProductKey == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'vendorProductKey' when calling InstrumentApi->EnrichInstrument");
            }

            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'identifiers' when calling InstrumentApi->EnrichInstrument");
            }

            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "vendorProductKey", vendorProductKey));
            localVarRequestOptions.Data = identifiers;

            localVarRequestOptions.Operation = "InstrumentApi.EnrichInstrument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EnrichmentResponse>("/api/instrument/onboarding/enrich", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnrichInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorProductKey"></param>
        /// <param name="identifiers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnrichmentResponse</returns>
        public async System.Threading.Tasks.Task<EnrichmentResponse> EnrichInstrumentAsync(string vendorProductKey, Identifiers identifiers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<EnrichmentResponse> localVarResponse = await EnrichInstrumentWithHttpInfoAsync(vendorProductKey, identifiers, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorProductKey"></param>
        /// <param name="identifiers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnrichmentResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Horizon.Sdk.Client.ApiResponse<EnrichmentResponse>> EnrichInstrumentWithHttpInfoAsync(string vendorProductKey, Identifiers identifiers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vendorProductKey' is set
            if (vendorProductKey == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'vendorProductKey' when calling InstrumentApi->EnrichInstrument");
            }

            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'identifiers' when calling InstrumentApi->EnrichInstrument");
            }


            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "vendorProductKey", vendorProductKey));
            localVarRequestOptions.Data = identifiers;

            localVarRequestOptions.Operation = "InstrumentApi.EnrichInstrument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnrichmentResponse>("/api/instrument/onboarding/enrich", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnrichInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AllowedParameterValue&gt;</returns>
        public List<AllowedParameterValue> GetOpenFigiParameterOption(OpenFigiParameterOptionName parameterName, int operationIndex = 0)
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<List<AllowedParameterValue>> localVarResponse = GetOpenFigiParameterOptionWithHttpInfo(parameterName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AllowedParameterValue&gt;</returns>
        public Finbourne.Horizon.Sdk.Client.ApiResponse<List<AllowedParameterValue>> GetOpenFigiParameterOptionWithHttpInfo(OpenFigiParameterOptionName parameterName, int operationIndex = 0)
        {
            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));

            localVarRequestOptions.Operation = "InstrumentApi.GetOpenFigiParameterOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AllowedParameterValue>>("/api/instrument/onboarding/search/openfigi/parameterOptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenFigiParameterOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AllowedParameterValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<AllowedParameterValue>> GetOpenFigiParameterOptionAsync(OpenFigiParameterOptionName parameterName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<List<AllowedParameterValue>> localVarResponse = await GetOpenFigiParameterOptionWithHttpInfoAsync(parameterName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AllowedParameterValue&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Horizon.Sdk.Client.ApiResponse<List<AllowedParameterValue>>> GetOpenFigiParameterOptionWithHttpInfoAsync(OpenFigiParameterOptionName parameterName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));

            localVarRequestOptions.Operation = "InstrumentApi.GetOpenFigiParameterOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AllowedParameterValue>>("/api/instrument/onboarding/search/openfigi/parameterOptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenFigiParameterOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The execution ID returned by a previous query</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PermIdData&gt;</returns>
        public List<PermIdData> RetrievePermIdResult(string id, int operationIndex = 0)
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<List<PermIdData>> localVarResponse = RetrievePermIdResultWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The execution ID returned by a previous query</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PermIdData&gt;</returns>
        public Finbourne.Horizon.Sdk.Client.ApiResponse<List<PermIdData>> RetrievePermIdResultWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling InstrumentApi->RetrievePermIdResult");
            }

            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "InstrumentApi.RetrievePermIdResult";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PermIdData>>("/api/instrument/onboarding/search/permid/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrievePermIdResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The execution ID returned by a previous query</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PermIdData&gt;</returns>
        public async System.Threading.Tasks.Task<List<PermIdData>> RetrievePermIdResultAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<List<PermIdData>> localVarResponse = await RetrievePermIdResultWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The execution ID returned by a previous query</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PermIdData&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Horizon.Sdk.Client.ApiResponse<List<PermIdData>>> RetrievePermIdResultWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling InstrumentApi->RetrievePermIdResult");
            }


            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "InstrumentApi.RetrievePermIdResult";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PermIdData>>("/api/instrument/onboarding/search/permid/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrievePermIdResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="usePermId">Should also search PermId for additional information, defaults to &#x60;false&#x60;.</param>
        /// <param name="limit">Only affects results rom OpenFigi general text search (optional, default to 25)</param>
        /// <param name="marketSector">The market sector to search, defaults to &#x60;All&#x60;. (optional, default to &quot;All&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OpenFigiSearchResult</returns>
        public OpenFigiSearchResult SearchOpenFigi(string query, bool usePermId, int? limit = default(int?), string? marketSector = default(string?), int operationIndex = 0)
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<OpenFigiSearchResult> localVarResponse = SearchOpenFigiWithHttpInfo(query, usePermId, limit, marketSector);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="usePermId">Should also search PermId for additional information, defaults to &#x60;false&#x60;.</param>
        /// <param name="limit">Only affects results rom OpenFigi general text search (optional, default to 25)</param>
        /// <param name="marketSector">The market sector to search, defaults to &#x60;All&#x60;. (optional, default to &quot;All&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OpenFigiSearchResult</returns>
        public Finbourne.Horizon.Sdk.Client.ApiResponse<OpenFigiSearchResult> SearchOpenFigiWithHttpInfo(string query, bool usePermId, int? limit = default(int?), string? marketSector = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'query' when calling InstrumentApi->SearchOpenFigi");
            }

            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "usePermId", usePermId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (marketSector != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "marketSector", marketSector));
            }

            localVarRequestOptions.Operation = "InstrumentApi.SearchOpenFigi";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OpenFigiSearchResult>("/api/instrument/onboarding/search/openfigi", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchOpenFigi", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="usePermId">Should also search PermId for additional information, defaults to &#x60;false&#x60;.</param>
        /// <param name="limit">Only affects results rom OpenFigi general text search (optional, default to 25)</param>
        /// <param name="marketSector">The market sector to search, defaults to &#x60;All&#x60;. (optional, default to &quot;All&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OpenFigiSearchResult</returns>
        public async System.Threading.Tasks.Task<OpenFigiSearchResult> SearchOpenFigiAsync(string query, bool usePermId, int? limit = default(int?), string? marketSector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<OpenFigiSearchResult> localVarResponse = await SearchOpenFigiWithHttpInfoAsync(query, usePermId, limit, marketSector, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="usePermId">Should also search PermId for additional information, defaults to &#x60;false&#x60;.</param>
        /// <param name="limit">Only affects results rom OpenFigi general text search (optional, default to 25)</param>
        /// <param name="marketSector">The market sector to search, defaults to &#x60;All&#x60;. (optional, default to &quot;All&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OpenFigiSearchResult)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Horizon.Sdk.Client.ApiResponse<OpenFigiSearchResult>> SearchOpenFigiWithHttpInfoAsync(string query, bool usePermId, int? limit = default(int?), string? marketSector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'query' when calling InstrumentApi->SearchOpenFigi");
            }


            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "usePermId", usePermId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (marketSector != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "marketSector", marketSector));
            }

            localVarRequestOptions.Operation = "InstrumentApi.SearchOpenFigi";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OpenFigiSearchResult>("/api/instrument/onboarding/search/openfigi", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchOpenFigi", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketSector"></param>
        /// <param name="securityType"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;VendorProduct&gt;</returns>
        public List<VendorProduct> Vendors(string marketSector, string securityType, int? limit = default(int?), int operationIndex = 0)
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<List<VendorProduct>> localVarResponse = VendorsWithHttpInfo(marketSector, securityType, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketSector"></param>
        /// <param name="securityType"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;VendorProduct&gt;</returns>
        public Finbourne.Horizon.Sdk.Client.ApiResponse<List<VendorProduct>> VendorsWithHttpInfo(string marketSector, string securityType, int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'marketSector' is set
            if (marketSector == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'marketSector' when calling InstrumentApi->Vendors");
            }

            // verify the required parameter 'securityType' is set
            if (securityType == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'securityType' when calling InstrumentApi->Vendors");
            }

            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "marketSector", marketSector));
            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "securityType", securityType));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "InstrumentApi.Vendors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<VendorProduct>>("/api/instrument/onboarding/vendors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Vendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketSector"></param>
        /// <param name="securityType"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VendorProduct&gt;</returns>
        public async System.Threading.Tasks.Task<List<VendorProduct>> VendorsAsync(string marketSector, string securityType, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Horizon.Sdk.Client.ApiResponse<List<VendorProduct>> localVarResponse = await VendorsWithHttpInfoAsync(marketSector, securityType, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type. 
        /// </summary>
        /// <exception cref="Finbourne.Horizon.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketSector"></param>
        /// <param name="securityType"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VendorProduct&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Horizon.Sdk.Client.ApiResponse<List<VendorProduct>>> VendorsWithHttpInfoAsync(string marketSector, string securityType, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'marketSector' is set
            if (marketSector == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'marketSector' when calling InstrumentApi->Vendors");
            }

            // verify the required parameter 'securityType' is set
            if (securityType == null)
            {
                throw new Finbourne.Horizon.Sdk.Client.ApiException(400, "Missing required parameter 'securityType' when calling InstrumentApi->Vendors");
            }


            Finbourne.Horizon.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Horizon.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Horizon.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "marketSector", marketSector));
            localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "securityType", securityType));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Horizon.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "InstrumentApi.Vendors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<VendorProduct>>("/api/instrument/onboarding/vendors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Vendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}