/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// PermId Data Structure
    /// </summary>
    [DataContract(Name = "PermIdData")]
    public partial class PermIdData : IEquatable<PermIdData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermIdData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PermIdData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermIdData" /> class.
        /// </summary>
        /// <param name="figi">&gt;FIGI assigned to the instrument. (required).</param>
        /// <param name="ticker">Ticker assigned to the instrument (required).</param>
        /// <param name="mic">ISO market identification code(MIC) of the desired instrument(s) (required).</param>
        /// <param name="quotePermId">QuotePermId of the instrument (required).</param>
        /// <param name="isPrimaryQuote">If the quote is primary (required).</param>
        /// <param name="legalEntityIdentifier">LEI assigned to the instrument.</param>
        public PermIdData(string figi = default(string), string ticker = default(string), string mic = default(string), string quotePermId = default(string), bool isPrimaryQuote = default(bool), string legalEntityIdentifier = default(string))
        {
            // to ensure "figi" is required (not null)
            if (figi == null)
            {
                throw new ArgumentNullException("figi is a required property for PermIdData and cannot be null");
            }
            this.Figi = figi;
            // to ensure "ticker" is required (not null)
            if (ticker == null)
            {
                throw new ArgumentNullException("ticker is a required property for PermIdData and cannot be null");
            }
            this.Ticker = ticker;
            // to ensure "mic" is required (not null)
            if (mic == null)
            {
                throw new ArgumentNullException("mic is a required property for PermIdData and cannot be null");
            }
            this.Mic = mic;
            // to ensure "quotePermId" is required (not null)
            if (quotePermId == null)
            {
                throw new ArgumentNullException("quotePermId is a required property for PermIdData and cannot be null");
            }
            this.QuotePermId = quotePermId;
            this.IsPrimaryQuote = isPrimaryQuote;
            this.LegalEntityIdentifier = legalEntityIdentifier;
        }

        /// <summary>
        /// &gt;FIGI assigned to the instrument.
        /// </summary>
        /// <value>&gt;FIGI assigned to the instrument.</value>
        [DataMember(Name = "figi", IsRequired = true, EmitDefaultValue = true)]
        public string Figi { get; set; }

        /// <summary>
        /// Ticker assigned to the instrument
        /// </summary>
        /// <value>Ticker assigned to the instrument</value>
        [DataMember(Name = "ticker", IsRequired = true, EmitDefaultValue = true)]
        public string Ticker { get; set; }

        /// <summary>
        /// ISO market identification code(MIC) of the desired instrument(s)
        /// </summary>
        /// <value>ISO market identification code(MIC) of the desired instrument(s)</value>
        [DataMember(Name = "mic", IsRequired = true, EmitDefaultValue = true)]
        public string Mic { get; set; }

        /// <summary>
        /// QuotePermId of the instrument
        /// </summary>
        /// <value>QuotePermId of the instrument</value>
        [DataMember(Name = "quotePermId", IsRequired = true, EmitDefaultValue = true)]
        public string QuotePermId { get; set; }

        /// <summary>
        /// If the quote is primary
        /// </summary>
        /// <value>If the quote is primary</value>
        [DataMember(Name = "isPrimaryQuote", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPrimaryQuote { get; set; }

        /// <summary>
        /// LEI assigned to the instrument
        /// </summary>
        /// <value>LEI assigned to the instrument</value>
        [DataMember(Name = "legalEntityIdentifier", EmitDefaultValue = true)]
        public string LegalEntityIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PermIdData {\n");
            sb.Append("  Figi: ").Append(Figi).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Mic: ").Append(Mic).Append("\n");
            sb.Append("  QuotePermId: ").Append(QuotePermId).Append("\n");
            sb.Append("  IsPrimaryQuote: ").Append(IsPrimaryQuote).Append("\n");
            sb.Append("  LegalEntityIdentifier: ").Append(LegalEntityIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermIdData);
        }

        /// <summary>
        /// Returns true if PermIdData instances are equal
        /// </summary>
        /// <param name="input">Instance of PermIdData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermIdData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Figi == input.Figi ||
                    (this.Figi != null &&
                    this.Figi.Equals(input.Figi))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Mic == input.Mic ||
                    (this.Mic != null &&
                    this.Mic.Equals(input.Mic))
                ) && 
                (
                    this.QuotePermId == input.QuotePermId ||
                    (this.QuotePermId != null &&
                    this.QuotePermId.Equals(input.QuotePermId))
                ) && 
                (
                    this.IsPrimaryQuote == input.IsPrimaryQuote ||
                    this.IsPrimaryQuote.Equals(input.IsPrimaryQuote)
                ) && 
                (
                    this.LegalEntityIdentifier == input.LegalEntityIdentifier ||
                    (this.LegalEntityIdentifier != null &&
                    this.LegalEntityIdentifier.Equals(input.LegalEntityIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Figi != null)
                {
                    hashCode = (hashCode * 59) + this.Figi.GetHashCode();
                }
                if (this.Ticker != null)
                {
                    hashCode = (hashCode * 59) + this.Ticker.GetHashCode();
                }
                if (this.Mic != null)
                {
                    hashCode = (hashCode * 59) + this.Mic.GetHashCode();
                }
                if (this.QuotePermId != null)
                {
                    hashCode = (hashCode * 59) + this.QuotePermId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPrimaryQuote.GetHashCode();
                if (this.LegalEntityIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.LegalEntityIdentifier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
