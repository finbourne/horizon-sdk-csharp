/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// IntegrationRunResponse
    /// </summary>
    [DataContract(Name = "IntegrationRunResponse")]
    public partial class IntegrationRunResponse : IEquatable<IntegrationRunResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationRunResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IntegrationRunResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationRunResponse" /> class.
        /// </summary>
        /// <param name="runId">runId (required).</param>
        /// <param name="refRunId">refRunId.</param>
        /// <param name="attempt">attempt (required).</param>
        /// <param name="instanceId">instanceId.</param>
        /// <param name="instanceName">instanceName.</param>
        /// <param name="status">status.</param>
        /// <param name="message">message.</param>
        /// <param name="integration">integration (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="integrationLogs">integrationLogs.</param>
        public IntegrationRunResponse(Guid runId = default(Guid), Guid? refRunId = default(Guid?), int attempt = default(int), Guid? instanceId = default(Guid?), string instanceName = default(string), string status = default(string), string message = default(string), IntegrationRunIntegration integration = default(IntegrationRunIntegration), IntegrationRunVersion varVersion = default(IntegrationRunVersion), Dictionary<string, Dictionary<string, IntegrationRunLog>> integrationLogs = default(Dictionary<string, Dictionary<string, IntegrationRunLog>>))
        {
            this.RunId = runId;
            this.Attempt = attempt;
            // to ensure "integration" is required (not null)
            if (integration == null)
            {
                throw new ArgumentNullException("integration is a required property for IntegrationRunResponse and cannot be null");
            }
            this.Integration = integration;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for IntegrationRunResponse and cannot be null");
            }
            this.VarVersion = varVersion;
            this.RefRunId = refRunId;
            this.InstanceId = instanceId;
            this.InstanceName = instanceName;
            this.Status = status;
            this.Message = message;
            this.IntegrationLogs = integrationLogs;
        }

        /// <summary>
        /// Gets or Sets RunId
        /// </summary>
        [DataMember(Name = "runId", IsRequired = true, EmitDefaultValue = true)]
        public Guid RunId { get; set; }

        /// <summary>
        /// Gets or Sets RefRunId
        /// </summary>
        [DataMember(Name = "refRunId", EmitDefaultValue = true)]
        public Guid? RefRunId { get; set; }

        /// <summary>
        /// Gets or Sets Attempt
        /// </summary>
        [DataMember(Name = "attempt", IsRequired = true, EmitDefaultValue = true)]
        public int Attempt { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name = "instanceId", EmitDefaultValue = true)]
        public Guid? InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets InstanceName
        /// </summary>
        [DataMember(Name = "instanceName", EmitDefaultValue = true)]
        public string InstanceName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Integration
        /// </summary>
        [DataMember(Name = "integration", IsRequired = true, EmitDefaultValue = true)]
        public IntegrationRunIntegration Integration { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public IntegrationRunVersion VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationLogs
        /// </summary>
        [DataMember(Name = "integrationLogs", EmitDefaultValue = true)]
        public Dictionary<string, Dictionary<string, IntegrationRunLog>> IntegrationLogs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntegrationRunResponse {\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  RefRunId: ").Append(RefRunId).Append("\n");
            sb.Append("  Attempt: ").Append(Attempt).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  InstanceName: ").Append(InstanceName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Integration: ").Append(Integration).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  IntegrationLogs: ").Append(IntegrationLogs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntegrationRunResponse);
        }

        /// <summary>
        /// Returns true if IntegrationRunResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of IntegrationRunResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationRunResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.RefRunId == input.RefRunId ||
                    (this.RefRunId != null &&
                    this.RefRunId.Equals(input.RefRunId))
                ) && 
                (
                    this.Attempt == input.Attempt ||
                    this.Attempt.Equals(input.Attempt)
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.InstanceName == input.InstanceName ||
                    (this.InstanceName != null &&
                    this.InstanceName.Equals(input.InstanceName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Integration == input.Integration ||
                    (this.Integration != null &&
                    this.Integration.Equals(input.Integration))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.IntegrationLogs == input.IntegrationLogs ||
                    this.IntegrationLogs != null &&
                    input.IntegrationLogs != null &&
                    this.IntegrationLogs.SequenceEqual(input.IntegrationLogs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunId != null)
                {
                    hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                }
                if (this.RefRunId != null)
                {
                    hashCode = (hashCode * 59) + this.RefRunId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Attempt.GetHashCode();
                if (this.InstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                }
                if (this.InstanceName != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceName.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Integration != null)
                {
                    hashCode = (hashCode * 59) + this.Integration.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.IntegrationLogs != null)
                {
                    hashCode = (hashCode * 59) + this.IntegrationLogs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
