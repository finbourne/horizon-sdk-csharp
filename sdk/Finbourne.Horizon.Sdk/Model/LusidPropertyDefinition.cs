/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Defines the information in a LUSID Property Definition
    /// </summary>
    [DataContract(Name = "LusidPropertyDefinition")]
    public partial class LusidPropertyDefinition : IEquatable<LusidPropertyDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidPropertyDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LusidPropertyDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidPropertyDefinition" /> class.
        /// </summary>
        /// <param name="key">Property key associated with the mapping (required).</param>
        /// <param name="domain">The domain of this definition. (required).</param>
        /// <param name="scope">The scope of this definition. (required).</param>
        /// <param name="code">The code of this definition. (required).</param>
        /// <param name="displayName">The name used when this definition is displayed. (required).</param>
        /// <param name="dataTypeId">dataTypeId (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="lifetime">lifetime (required).</param>
        /// <param name="constraintStyle">constraintStyle (required).</param>
        public LusidPropertyDefinition(string key = default(string), string domain = default(string), string scope = default(string), string code = default(string), string displayName = default(string), ResourceId dataTypeId = default(ResourceId), string description = default(string), string lifetime = default(string), string constraintStyle = default(string))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for LusidPropertyDefinition and cannot be null");
            }
            this.Key = key;
            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new ArgumentNullException("domain is a required property for LusidPropertyDefinition and cannot be null");
            }
            this.Domain = domain;
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new ArgumentNullException("scope is a required property for LusidPropertyDefinition and cannot be null");
            }
            this.Scope = scope;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for LusidPropertyDefinition and cannot be null");
            }
            this.Code = code;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for LusidPropertyDefinition and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "dataTypeId" is required (not null)
            if (dataTypeId == null)
            {
                throw new ArgumentNullException("dataTypeId is a required property for LusidPropertyDefinition and cannot be null");
            }
            this.DataTypeId = dataTypeId;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for LusidPropertyDefinition and cannot be null");
            }
            this.Description = description;
            // to ensure "lifetime" is required (not null)
            if (lifetime == null)
            {
                throw new ArgumentNullException("lifetime is a required property for LusidPropertyDefinition and cannot be null");
            }
            this.Lifetime = lifetime;
            // to ensure "constraintStyle" is required (not null)
            if (constraintStyle == null)
            {
                throw new ArgumentNullException("constraintStyle is a required property for LusidPropertyDefinition and cannot be null");
            }
            this.ConstraintStyle = constraintStyle;
        }

        /// <summary>
        /// Property key associated with the mapping
        /// </summary>
        /// <value>Property key associated with the mapping</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// The domain of this definition.
        /// </summary>
        /// <value>The domain of this definition.</value>
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = true)]
        public string Domain { get; set; }

        /// <summary>
        /// The scope of this definition.
        /// </summary>
        /// <value>The scope of this definition.</value>
        [DataMember(Name = "scope", IsRequired = true, EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// The code of this definition.
        /// </summary>
        /// <value>The code of this definition.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// The name used when this definition is displayed.
        /// </summary>
        /// <value>The name used when this definition is displayed.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DataTypeId
        /// </summary>
        [DataMember(Name = "dataTypeId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId DataTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Lifetime
        /// </summary>
        [DataMember(Name = "lifetime", IsRequired = true, EmitDefaultValue = true)]
        public string Lifetime { get; set; }

        /// <summary>
        /// Gets or Sets ConstraintStyle
        /// </summary>
        [DataMember(Name = "constraintStyle", IsRequired = true, EmitDefaultValue = true)]
        public string ConstraintStyle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LusidPropertyDefinition {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DataTypeId: ").Append(DataTypeId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Lifetime: ").Append(Lifetime).Append("\n");
            sb.Append("  ConstraintStyle: ").Append(ConstraintStyle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LusidPropertyDefinition);
        }

        /// <summary>
        /// Returns true if LusidPropertyDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of LusidPropertyDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LusidPropertyDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DataTypeId == input.DataTypeId ||
                    (this.DataTypeId != null &&
                    this.DataTypeId.Equals(input.DataTypeId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Lifetime == input.Lifetime ||
                    (this.Lifetime != null &&
                    this.Lifetime.Equals(input.Lifetime))
                ) && 
                (
                    this.ConstraintStyle == input.ConstraintStyle ||
                    (this.ConstraintStyle != null &&
                    this.ConstraintStyle.Equals(input.ConstraintStyle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.DataTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.DataTypeId.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Lifetime != null)
                {
                    hashCode = (hashCode * 59) + this.Lifetime.GetHashCode();
                }
                if (this.ConstraintStyle != null)
                {
                    hashCode = (hashCode * 59) + this.ConstraintStyle.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Key (string) minLength
            if (this.Key != null && this.Key.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be greater than 1.", new [] { "Key" });
            }

            // Domain (string) minLength
            if (this.Domain != null && this.Domain.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Domain, length must be greater than 1.", new [] { "Domain" });
            }

            // Scope (string) minLength
            if (this.Scope != null && this.Scope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be greater than 1.", new [] { "Scope" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Lifetime (string) minLength
            if (this.Lifetime != null && this.Lifetime.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lifetime, length must be greater than 1.", new [] { "Lifetime" });
            }

            // ConstraintStyle (string) minLength
            if (this.ConstraintStyle != null && this.ConstraintStyle.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConstraintStyle, length must be greater than 1.", new [] { "ConstraintStyle" });
            }

            yield break;
        }
    }
}
