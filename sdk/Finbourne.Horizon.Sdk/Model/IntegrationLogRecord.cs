/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// IntegrationLogRecord
    /// </summary>
    [DataContract(Name = "IntegrationLogRecord")]
    public partial class IntegrationLogRecord : IEquatable<IntegrationLogRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogRecord" /> class.
        /// </summary>
        /// <param name="recordType">recordType.</param>
        /// <param name="idType">idType.</param>
        /// <param name="idValue">idValue.</param>
        /// <param name="attributeName">attributeName.</param>
        /// <param name="attributeValue">attributeValue.</param>
        public IntegrationLogRecord(string recordType = default(string), string idType = default(string), string idValue = default(string), string attributeName = default(string), string attributeValue = default(string))
        {
            this.RecordType = recordType;
            this.IdType = idType;
            this.IdValue = idValue;
            this.AttributeName = attributeName;
            this.AttributeValue = attributeValue;
        }

        /// <summary>
        /// Gets or Sets RecordType
        /// </summary>
        [DataMember(Name = "recordType", EmitDefaultValue = true)]
        public string RecordType { get; set; }

        /// <summary>
        /// Gets or Sets IdType
        /// </summary>
        [DataMember(Name = "idType", EmitDefaultValue = true)]
        public string IdType { get; set; }

        /// <summary>
        /// Gets or Sets IdValue
        /// </summary>
        [DataMember(Name = "idValue", EmitDefaultValue = true)]
        public string IdValue { get; set; }

        /// <summary>
        /// Gets or Sets AttributeName
        /// </summary>
        [DataMember(Name = "attributeName", EmitDefaultValue = true)]
        public string AttributeName { get; set; }

        /// <summary>
        /// Gets or Sets AttributeValue
        /// </summary>
        [DataMember(Name = "attributeValue", EmitDefaultValue = true)]
        public string AttributeValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntegrationLogRecord {\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  IdValue: ").Append(IdValue).Append("\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  AttributeValue: ").Append(AttributeValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntegrationLogRecord);
        }

        /// <summary>
        /// Returns true if IntegrationLogRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of IntegrationLogRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationLogRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RecordType == input.RecordType ||
                    (this.RecordType != null &&
                    this.RecordType.Equals(input.RecordType))
                ) && 
                (
                    this.IdType == input.IdType ||
                    (this.IdType != null &&
                    this.IdType.Equals(input.IdType))
                ) && 
                (
                    this.IdValue == input.IdValue ||
                    (this.IdValue != null &&
                    this.IdValue.Equals(input.IdValue))
                ) && 
                (
                    this.AttributeName == input.AttributeName ||
                    (this.AttributeName != null &&
                    this.AttributeName.Equals(input.AttributeName))
                ) && 
                (
                    this.AttributeValue == input.AttributeValue ||
                    (this.AttributeValue != null &&
                    this.AttributeValue.Equals(input.AttributeValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordType != null)
                {
                    hashCode = (hashCode * 59) + this.RecordType.GetHashCode();
                }
                if (this.IdType != null)
                {
                    hashCode = (hashCode * 59) + this.IdType.GetHashCode();
                }
                if (this.IdValue != null)
                {
                    hashCode = (hashCode * 59) + this.IdValue.GetHashCode();
                }
                if (this.AttributeName != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeName.GetHashCode();
                }
                if (this.AttributeValue != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
