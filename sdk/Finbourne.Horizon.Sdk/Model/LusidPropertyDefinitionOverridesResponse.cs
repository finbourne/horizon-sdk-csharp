/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// An item that has been updated as a result of setting LusidPropertyDefinitionOverrides.
    /// </summary>
    [DataContract(Name = "LusidPropertyDefinitionOverridesResponse")]
    public partial class LusidPropertyDefinitionOverridesResponse : IEquatable<LusidPropertyDefinitionOverridesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidPropertyDefinitionOverridesResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LusidPropertyDefinitionOverridesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidPropertyDefinitionOverridesResponse" /> class.
        /// </summary>
        /// <param name="action">The action performed on this property. \&quot;upsert\&quot; for setting values for new and existing              properties. \&quot;delete\&quot; for existing properties that were removed (required).</param>
        /// <param name="writeError">writeError.</param>
        /// <param name="writeErrorDetail">writeErrorDetail.</param>
        /// <param name="displayNameOverride">displayNameOverride.</param>
        /// <param name="descriptionOverride">descriptionOverride.</param>
        public LusidPropertyDefinitionOverridesResponse(string action = default(string), string writeError = default(string), string writeErrorDetail = default(string), string displayNameOverride = default(string), string descriptionOverride = default(string))
        {
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new ArgumentNullException("action is a required property for LusidPropertyDefinitionOverridesResponse and cannot be null");
            }
            this.Action = action;
            this.WriteError = writeError;
            this.WriteErrorDetail = writeErrorDetail;
            this.DisplayNameOverride = displayNameOverride;
            this.DescriptionOverride = descriptionOverride;
        }

        /// <summary>
        /// The action performed on this property. \&quot;upsert\&quot; for setting values for new and existing              properties. \&quot;delete\&quot; for existing properties that were removed
        /// </summary>
        /// <value>The action performed on this property. \&quot;upsert\&quot; for setting values for new and existing              properties. \&quot;delete\&quot; for existing properties that were removed</value>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets WriteError
        /// </summary>
        [DataMember(Name = "writeError", EmitDefaultValue = true)]
        public string WriteError { get; set; }

        /// <summary>
        /// Gets or Sets WriteErrorDetail
        /// </summary>
        [DataMember(Name = "writeErrorDetail", EmitDefaultValue = true)]
        public string WriteErrorDetail { get; set; }

        /// <summary>
        /// Gets or Sets DisplayNameOverride
        /// </summary>
        [DataMember(Name = "displayNameOverride", EmitDefaultValue = true)]
        public string DisplayNameOverride { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionOverride
        /// </summary>
        [DataMember(Name = "descriptionOverride", EmitDefaultValue = true)]
        public string DescriptionOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LusidPropertyDefinitionOverridesResponse {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  WriteError: ").Append(WriteError).Append("\n");
            sb.Append("  WriteErrorDetail: ").Append(WriteErrorDetail).Append("\n");
            sb.Append("  DisplayNameOverride: ").Append(DisplayNameOverride).Append("\n");
            sb.Append("  DescriptionOverride: ").Append(DescriptionOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LusidPropertyDefinitionOverridesResponse);
        }

        /// <summary>
        /// Returns true if LusidPropertyDefinitionOverridesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LusidPropertyDefinitionOverridesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LusidPropertyDefinitionOverridesResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.WriteError == input.WriteError ||
                    (this.WriteError != null &&
                    this.WriteError.Equals(input.WriteError))
                ) && 
                (
                    this.WriteErrorDetail == input.WriteErrorDetail ||
                    (this.WriteErrorDetail != null &&
                    this.WriteErrorDetail.Equals(input.WriteErrorDetail))
                ) && 
                (
                    this.DisplayNameOverride == input.DisplayNameOverride ||
                    (this.DisplayNameOverride != null &&
                    this.DisplayNameOverride.Equals(input.DisplayNameOverride))
                ) && 
                (
                    this.DescriptionOverride == input.DescriptionOverride ||
                    (this.DescriptionOverride != null &&
                    this.DescriptionOverride.Equals(input.DescriptionOverride))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.WriteError != null)
                {
                    hashCode = (hashCode * 59) + this.WriteError.GetHashCode();
                }
                if (this.WriteErrorDetail != null)
                {
                    hashCode = (hashCode * 59) + this.WriteErrorDetail.GetHashCode();
                }
                if (this.DisplayNameOverride != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayNameOverride.GetHashCode();
                }
                if (this.DescriptionOverride != null)
                {
                    hashCode = (hashCode * 59) + this.DescriptionOverride.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
