/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Holds information about Horizon Audit Files
    /// </summary>
    [DataContract(Name = "AuditFileDetails")]
    public partial class AuditFileDetails : IEquatable<AuditFileDetails>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FileType
        /// </summary>
        [DataMember(Name = "fileType", IsRequired = true, EmitDefaultValue = true)]
        public AuditFileType FileType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditFileDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditFileDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditFileDetails" /> class.
        /// </summary>
        /// <param name="fileType">fileType (required).</param>
        /// <param name="filePathAndName">The file path and name (required).</param>
        public AuditFileDetails(AuditFileType fileType = default(AuditFileType), string filePathAndName = default(string))
        {
            this.FileType = fileType;
            // to ensure "filePathAndName" is required (not null)
            if (filePathAndName == null)
            {
                throw new ArgumentNullException("filePathAndName is a required property for AuditFileDetails and cannot be null");
            }
            this.FilePathAndName = filePathAndName;
        }

        /// <summary>
        /// The file path and name
        /// </summary>
        /// <value>The file path and name</value>
        [DataMember(Name = "filePathAndName", IsRequired = true, EmitDefaultValue = true)]
        public string FilePathAndName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuditFileDetails {\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  FilePathAndName: ").Append(FilePathAndName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditFileDetails);
        }

        /// <summary>
        /// Returns true if AuditFileDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditFileDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditFileDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FileType == input.FileType ||
                    this.FileType.Equals(input.FileType)
                ) && 
                (
                    this.FilePathAndName == input.FilePathAndName ||
                    (this.FilePathAndName != null &&
                    this.FilePathAndName.Equals(input.FilePathAndName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FileType.GetHashCode();
                if (this.FilePathAndName != null)
                {
                    hashCode = (hashCode * 59) + this.FilePathAndName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FilePathAndName (string) maxLength
            if (this.FilePathAndName != null && this.FilePathAndName.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FilePathAndName, length must be less than 1024.", new [] { "FilePathAndName" });
            }

            // FilePathAndName (string) minLength
            if (this.FilePathAndName != null && this.FilePathAndName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FilePathAndName, length must be greater than 0.", new [] { "FilePathAndName" });
            }

            yield break;
        }
    }
}
