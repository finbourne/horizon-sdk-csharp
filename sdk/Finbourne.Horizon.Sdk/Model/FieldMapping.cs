/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Mapping from a set of Vendor Fields to a LUSID core entity field
    /// </summary>
    [DataContract(Name = "FieldMapping")]
    public partial class FieldMapping : IEquatable<FieldMapping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FieldMapping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldMapping" /> class.
        /// </summary>
        /// <param name="fieldName">The LUSID core entity field (required).</param>
        /// <param name="defaultValue">Default value if needed.</param>
        /// <param name="vendorFields">Fields that will be used to map to this field (required).</param>
        /// <param name="transformationDescription">The transformation, if required, to map from VendorFields to the LUSID Property.</param>
        /// <param name="entityType">The LUSID Entity this is valid for (required).</param>
        /// <param name="entitySubType">The LUSID Entity sub type this is valid for.</param>
        /// <param name="versions">The versions of the Vendor integration this mapping is valid for (required).</param>
        public FieldMapping(string fieldName = default(string), string defaultValue = default(string), List<VendorField> vendorFields = default(List<VendorField>), string transformationDescription = default(string), string entityType = default(string), string entitySubType = default(string), List<string> versions = default(List<string>))
        {
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new ArgumentNullException("fieldName is a required property for FieldMapping and cannot be null");
            }
            this.FieldName = fieldName;
            // to ensure "vendorFields" is required (not null)
            if (vendorFields == null)
            {
                throw new ArgumentNullException("vendorFields is a required property for FieldMapping and cannot be null");
            }
            this.VendorFields = vendorFields;
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new ArgumentNullException("entityType is a required property for FieldMapping and cannot be null");
            }
            this.EntityType = entityType;
            // to ensure "versions" is required (not null)
            if (versions == null)
            {
                throw new ArgumentNullException("versions is a required property for FieldMapping and cannot be null");
            }
            this.Versions = versions;
            this.DefaultValue = defaultValue;
            this.TransformationDescription = transformationDescription;
            this.EntitySubType = entitySubType;
        }

        /// <summary>
        /// The LUSID core entity field
        /// </summary>
        /// <value>The LUSID core entity field</value>
        [DataMember(Name = "fieldName", IsRequired = true, EmitDefaultValue = true)]
        public string FieldName { get; set; }

        /// <summary>
        /// Default value if needed
        /// </summary>
        /// <value>Default value if needed</value>
        [DataMember(Name = "defaultValue", EmitDefaultValue = true)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Fields that will be used to map to this field
        /// </summary>
        /// <value>Fields that will be used to map to this field</value>
        [DataMember(Name = "vendorFields", IsRequired = true, EmitDefaultValue = true)]
        public List<VendorField> VendorFields { get; set; }

        /// <summary>
        /// The transformation, if required, to map from VendorFields to the LUSID Property
        /// </summary>
        /// <value>The transformation, if required, to map from VendorFields to the LUSID Property</value>
        [DataMember(Name = "transformationDescription", EmitDefaultValue = true)]
        public string TransformationDescription { get; set; }

        /// <summary>
        /// The LUSID Entity this is valid for
        /// </summary>
        /// <value>The LUSID Entity this is valid for</value>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// The LUSID Entity sub type this is valid for
        /// </summary>
        /// <value>The LUSID Entity sub type this is valid for</value>
        [DataMember(Name = "entitySubType", EmitDefaultValue = true)]
        public string EntitySubType { get; set; }

        /// <summary>
        /// The versions of the Vendor integration this mapping is valid for
        /// </summary>
        /// <value>The versions of the Vendor integration this mapping is valid for</value>
        [DataMember(Name = "versions", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldMapping {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  VendorFields: ").Append(VendorFields).Append("\n");
            sb.Append("  TransformationDescription: ").Append(TransformationDescription).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntitySubType: ").Append(EntitySubType).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldMapping);
        }

        /// <summary>
        /// Returns true if FieldMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldMapping input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.VendorFields == input.VendorFields ||
                    this.VendorFields != null &&
                    input.VendorFields != null &&
                    this.VendorFields.SequenceEqual(input.VendorFields)
                ) && 
                (
                    this.TransformationDescription == input.TransformationDescription ||
                    (this.TransformationDescription != null &&
                    this.TransformationDescription.Equals(input.TransformationDescription))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntitySubType == input.EntitySubType ||
                    (this.EntitySubType != null &&
                    this.EntitySubType.Equals(input.EntitySubType))
                ) && 
                (
                    this.Versions == input.Versions ||
                    this.Versions != null &&
                    input.Versions != null &&
                    this.Versions.SequenceEqual(input.Versions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                {
                    hashCode = (hashCode * 59) + this.FieldName.GetHashCode();
                }
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                if (this.VendorFields != null)
                {
                    hashCode = (hashCode * 59) + this.VendorFields.GetHashCode();
                }
                if (this.TransformationDescription != null)
                {
                    hashCode = (hashCode * 59) + this.TransformationDescription.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.EntitySubType != null)
                {
                    hashCode = (hashCode * 59) + this.EntitySubType.GetHashCode();
                }
                if (this.Versions != null)
                {
                    hashCode = (hashCode * 59) + this.Versions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
