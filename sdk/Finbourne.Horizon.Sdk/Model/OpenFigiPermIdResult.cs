/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// A packed WebAPI OpenFigi DTO and PermId DTO
    /// </summary>
    [DataContract(Name = "OpenFigiPermIdResult")]
    public partial class OpenFigiPermIdResult : IEquatable<OpenFigiPermIdResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenFigiPermIdResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OpenFigiPermIdResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenFigiPermIdResult" /> class.
        /// </summary>
        /// <param name="openFigiResult">openFigiResult (required).</param>
        /// <param name="permIdResult">permIdResult.</param>
        public OpenFigiPermIdResult(OpenFigiData openFigiResult = default(OpenFigiData), PermIdData permIdResult = default(PermIdData))
        {
            // to ensure "openFigiResult" is required (not null)
            if (openFigiResult == null)
            {
                throw new ArgumentNullException("openFigiResult is a required property for OpenFigiPermIdResult and cannot be null");
            }
            this.OpenFigiResult = openFigiResult;
            this.PermIdResult = permIdResult;
        }

        /// <summary>
        /// Gets or Sets OpenFigiResult
        /// </summary>
        [DataMember(Name = "openFigiResult", IsRequired = true, EmitDefaultValue = true)]
        public OpenFigiData OpenFigiResult { get; set; }

        /// <summary>
        /// Gets or Sets PermIdResult
        /// </summary>
        [DataMember(Name = "permIdResult", EmitDefaultValue = false)]
        public PermIdData PermIdResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenFigiPermIdResult {\n");
            sb.Append("  OpenFigiResult: ").Append(OpenFigiResult).Append("\n");
            sb.Append("  PermIdResult: ").Append(PermIdResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenFigiPermIdResult);
        }

        /// <summary>
        /// Returns true if OpenFigiPermIdResult instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenFigiPermIdResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenFigiPermIdResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OpenFigiResult == input.OpenFigiResult ||
                    (this.OpenFigiResult != null &&
                    this.OpenFigiResult.Equals(input.OpenFigiResult))
                ) && 
                (
                    this.PermIdResult == input.PermIdResult ||
                    (this.PermIdResult != null &&
                    this.PermIdResult.Equals(input.PermIdResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpenFigiResult != null)
                {
                    hashCode = (hashCode * 59) + this.OpenFigiResult.GetHashCode();
                }
                if (this.PermIdResult != null)
                {
                    hashCode = (hashCode * 59) + this.PermIdResult.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
