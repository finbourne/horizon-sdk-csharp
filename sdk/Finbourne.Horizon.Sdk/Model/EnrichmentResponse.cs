/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Collated enrichment result information
    /// </summary>
    [DataContract(Name = "EnrichmentResponse")]
    public partial class EnrichmentResponse : IEquatable<EnrichmentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrichmentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnrichmentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrichmentResponse" /> class.
        /// </summary>
        /// <param name="enrichedInstruments">enrichedInstruments (required).</param>
        /// <param name="ignoredInstruments">ignoredInstruments (required).</param>
        /// <param name="errorFileId">Error File ID, if one was created.</param>
        public EnrichmentResponse(List<string> enrichedInstruments = default(List<string>), List<string> ignoredInstruments = default(List<string>), string errorFileId = default(string))
        {
            // to ensure "enrichedInstruments" is required (not null)
            if (enrichedInstruments == null)
            {
                throw new ArgumentNullException("enrichedInstruments is a required property for EnrichmentResponse and cannot be null");
            }
            this.EnrichedInstruments = enrichedInstruments;
            // to ensure "ignoredInstruments" is required (not null)
            if (ignoredInstruments == null)
            {
                throw new ArgumentNullException("ignoredInstruments is a required property for EnrichmentResponse and cannot be null");
            }
            this.IgnoredInstruments = ignoredInstruments;
            this.ErrorFileId = errorFileId;
        }

        /// <summary>
        /// Gets or Sets EnrichedInstruments
        /// </summary>
        [DataMember(Name = "enrichedInstruments", IsRequired = true, EmitDefaultValue = true)]
        public List<string> EnrichedInstruments { get; set; }

        /// <summary>
        /// Gets or Sets IgnoredInstruments
        /// </summary>
        [DataMember(Name = "ignoredInstruments", IsRequired = true, EmitDefaultValue = true)]
        public List<string> IgnoredInstruments { get; set; }

        /// <summary>
        /// Error File ID, if one was created
        /// </summary>
        /// <value>Error File ID, if one was created</value>
        [DataMember(Name = "errorFileId", EmitDefaultValue = true)]
        public string ErrorFileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnrichmentResponse {\n");
            sb.Append("  EnrichedInstruments: ").Append(EnrichedInstruments).Append("\n");
            sb.Append("  IgnoredInstruments: ").Append(IgnoredInstruments).Append("\n");
            sb.Append("  ErrorFileId: ").Append(ErrorFileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnrichmentResponse);
        }

        /// <summary>
        /// Returns true if EnrichmentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EnrichmentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrichmentResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EnrichedInstruments == input.EnrichedInstruments ||
                    this.EnrichedInstruments != null &&
                    input.EnrichedInstruments != null &&
                    this.EnrichedInstruments.SequenceEqual(input.EnrichedInstruments)
                ) && 
                (
                    this.IgnoredInstruments == input.IgnoredInstruments ||
                    this.IgnoredInstruments != null &&
                    input.IgnoredInstruments != null &&
                    this.IgnoredInstruments.SequenceEqual(input.IgnoredInstruments)
                ) && 
                (
                    this.ErrorFileId == input.ErrorFileId ||
                    (this.ErrorFileId != null &&
                    this.ErrorFileId.Equals(input.ErrorFileId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnrichedInstruments != null)
                {
                    hashCode = (hashCode * 59) + this.EnrichedInstruments.GetHashCode();
                }
                if (this.IgnoredInstruments != null)
                {
                    hashCode = (hashCode * 59) + this.IgnoredInstruments.GetHashCode();
                }
                if (this.ErrorFileId != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorFileId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
