/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// An incoming request for a Horizon Complete Event
    /// </summary>
    [DataContract(Name = "AuditCompleteRequest")]
    public partial class AuditCompleteRequest : IEquatable<AuditCompleteRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public AuditCompleteStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditCompleteRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditCompleteRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditCompleteRequest" /> class.
        /// </summary>
        /// <param name="id">A unique ID identifiying the source of the event (required).</param>
        /// <param name="userId">A unique ID identifiying who owns the schedule (required).</param>
        /// <param name="schedulerRunId">The GUID of the schedule run (required).</param>
        /// <param name="startTime">When the run was started in UTC (required).</param>
        /// <param name="endTime">When the run finished in UTC (required).</param>
        /// <param name="message">A descriptive message to accompany the status (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="rowsTotal">The number of data rows operated on (required).</param>
        /// <param name="rowsSucceeded">The number of data rows successfully operated on (required).</param>
        /// <param name="rowsFailed">The number of data rows that failed to be operated on (required).</param>
        /// <param name="rowsIgnored">The number of data rows that had no actions taken (required).</param>
        /// <param name="auditFiles">A list of file details for attaching to the event (required).</param>
        /// <param name="processNameOverride">Optional Name for how the process appears in Data Feed Monitoring.</param>
        public AuditCompleteRequest(string id = default(string), string userId = default(string), string schedulerRunId = default(string), DateTimeOffset startTime = default(DateTimeOffset), DateTimeOffset endTime = default(DateTimeOffset), string message = default(string), AuditCompleteStatus status = default(AuditCompleteStatus), int rowsTotal = default(int), int rowsSucceeded = default(int), int rowsFailed = default(int), int rowsIgnored = default(int), List<AuditFileDetails> auditFiles = default(List<AuditFileDetails>), string processNameOverride = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AuditCompleteRequest and cannot be null");
            }
            this.Id = id;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for AuditCompleteRequest and cannot be null");
            }
            this.UserId = userId;
            // to ensure "schedulerRunId" is required (not null)
            if (schedulerRunId == null)
            {
                throw new ArgumentNullException("schedulerRunId is a required property for AuditCompleteRequest and cannot be null");
            }
            this.SchedulerRunId = schedulerRunId;
            this.StartTime = startTime;
            this.EndTime = endTime;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for AuditCompleteRequest and cannot be null");
            }
            this.Message = message;
            this.Status = status;
            this.RowsTotal = rowsTotal;
            this.RowsSucceeded = rowsSucceeded;
            this.RowsFailed = rowsFailed;
            this.RowsIgnored = rowsIgnored;
            // to ensure "auditFiles" is required (not null)
            if (auditFiles == null)
            {
                throw new ArgumentNullException("auditFiles is a required property for AuditCompleteRequest and cannot be null");
            }
            this.AuditFiles = auditFiles;
            this.ProcessNameOverride = processNameOverride;
        }

        /// <summary>
        /// A unique ID identifiying the source of the event
        /// </summary>
        /// <value>A unique ID identifiying the source of the event</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A unique ID identifiying who owns the schedule
        /// </summary>
        /// <value>A unique ID identifiying who owns the schedule</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// The GUID of the schedule run
        /// </summary>
        /// <value>The GUID of the schedule run</value>
        [DataMember(Name = "schedulerRunId", IsRequired = true, EmitDefaultValue = true)]
        public string SchedulerRunId { get; set; }

        /// <summary>
        /// When the run was started in UTC
        /// </summary>
        /// <value>When the run was started in UTC</value>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// When the run finished in UTC
        /// </summary>
        /// <value>When the run finished in UTC</value>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        /// A descriptive message to accompany the status
        /// </summary>
        /// <value>A descriptive message to accompany the status</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// The number of data rows operated on
        /// </summary>
        /// <value>The number of data rows operated on</value>
        [DataMember(Name = "rowsTotal", IsRequired = true, EmitDefaultValue = true)]
        public int RowsTotal { get; set; }

        /// <summary>
        /// The number of data rows successfully operated on
        /// </summary>
        /// <value>The number of data rows successfully operated on</value>
        [DataMember(Name = "rowsSucceeded", IsRequired = true, EmitDefaultValue = true)]
        public int RowsSucceeded { get; set; }

        /// <summary>
        /// The number of data rows that failed to be operated on
        /// </summary>
        /// <value>The number of data rows that failed to be operated on</value>
        [DataMember(Name = "rowsFailed", IsRequired = true, EmitDefaultValue = true)]
        public int RowsFailed { get; set; }

        /// <summary>
        /// The number of data rows that had no actions taken
        /// </summary>
        /// <value>The number of data rows that had no actions taken</value>
        [DataMember(Name = "rowsIgnored", IsRequired = true, EmitDefaultValue = true)]
        public int RowsIgnored { get; set; }

        /// <summary>
        /// A list of file details for attaching to the event
        /// </summary>
        /// <value>A list of file details for attaching to the event</value>
        [DataMember(Name = "auditFiles", IsRequired = true, EmitDefaultValue = true)]
        public List<AuditFileDetails> AuditFiles { get; set; }

        /// <summary>
        /// Optional Name for how the process appears in Data Feed Monitoring
        /// </summary>
        /// <value>Optional Name for how the process appears in Data Feed Monitoring</value>
        [DataMember(Name = "processNameOverride", EmitDefaultValue = true)]
        public string ProcessNameOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuditCompleteRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  SchedulerRunId: ").Append(SchedulerRunId).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RowsTotal: ").Append(RowsTotal).Append("\n");
            sb.Append("  RowsSucceeded: ").Append(RowsSucceeded).Append("\n");
            sb.Append("  RowsFailed: ").Append(RowsFailed).Append("\n");
            sb.Append("  RowsIgnored: ").Append(RowsIgnored).Append("\n");
            sb.Append("  AuditFiles: ").Append(AuditFiles).Append("\n");
            sb.Append("  ProcessNameOverride: ").Append(ProcessNameOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditCompleteRequest);
        }

        /// <summary>
        /// Returns true if AuditCompleteRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditCompleteRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditCompleteRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.SchedulerRunId == input.SchedulerRunId ||
                    (this.SchedulerRunId != null &&
                    this.SchedulerRunId.Equals(input.SchedulerRunId))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.RowsTotal == input.RowsTotal ||
                    this.RowsTotal.Equals(input.RowsTotal)
                ) && 
                (
                    this.RowsSucceeded == input.RowsSucceeded ||
                    this.RowsSucceeded.Equals(input.RowsSucceeded)
                ) && 
                (
                    this.RowsFailed == input.RowsFailed ||
                    this.RowsFailed.Equals(input.RowsFailed)
                ) && 
                (
                    this.RowsIgnored == input.RowsIgnored ||
                    this.RowsIgnored.Equals(input.RowsIgnored)
                ) && 
                (
                    this.AuditFiles == input.AuditFiles ||
                    this.AuditFiles != null &&
                    input.AuditFiles != null &&
                    this.AuditFiles.SequenceEqual(input.AuditFiles)
                ) && 
                (
                    this.ProcessNameOverride == input.ProcessNameOverride ||
                    (this.ProcessNameOverride != null &&
                    this.ProcessNameOverride.Equals(input.ProcessNameOverride))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.SchedulerRunId != null)
                {
                    hashCode = (hashCode * 59) + this.SchedulerRunId.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.RowsTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.RowsSucceeded.GetHashCode();
                hashCode = (hashCode * 59) + this.RowsFailed.GetHashCode();
                hashCode = (hashCode * 59) + this.RowsIgnored.GetHashCode();
                if (this.AuditFiles != null)
                {
                    hashCode = (hashCode * 59) + this.AuditFiles.GetHashCode();
                }
                if (this.ProcessNameOverride != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessNameOverride.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 1024.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 0.", new [] { "Id" });
            }

            // UserId (string) maxLength
            if (this.UserId != null && this.UserId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be less than 1024.", new [] { "UserId" });
            }

            // UserId (string) minLength
            if (this.UserId != null && this.UserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be greater than 0.", new [] { "UserId" });
            }

            // SchedulerRunId (string) maxLength
            if (this.SchedulerRunId != null && this.SchedulerRunId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SchedulerRunId, length must be less than 1024.", new [] { "SchedulerRunId" });
            }

            // SchedulerRunId (string) minLength
            if (this.SchedulerRunId != null && this.SchedulerRunId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SchedulerRunId, length must be greater than 0.", new [] { "SchedulerRunId" });
            }

            // Message (string) maxLength
            if (this.Message != null && this.Message.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 1024.", new [] { "Message" });
            }

            // Message (string) minLength
            if (this.Message != null && this.Message.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be greater than 0.", new [] { "Message" });
            }

            // ProcessNameOverride (string) maxLength
            if (this.ProcessNameOverride != null && this.ProcessNameOverride.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProcessNameOverride, length must be less than 1024.", new [] { "ProcessNameOverride" });
            }

            // ProcessNameOverride (string) minLength
            if (this.ProcessNameOverride != null && this.ProcessNameOverride.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProcessNameOverride, length must be greater than 0.", new [] { "ProcessNameOverride" });
            }

            yield break;
        }
    }
}
