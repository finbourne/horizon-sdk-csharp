/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Reference to a specific vendor field
    /// </summary>
    [DataContract(Name = "VendorField")]
    public partial class VendorField : IEquatable<VendorField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VendorField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorField" /> class.
        /// </summary>
        /// <param name="package">The vendor package it is included in (required).</param>
        /// <param name="field">The name of the field (required).</param>
        public VendorField(string package = default(string), string field = default(string))
        {
            // to ensure "package" is required (not null)
            if (package == null)
            {
                throw new ArgumentNullException("package is a required property for VendorField and cannot be null");
            }
            this.Package = package;
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new ArgumentNullException("field is a required property for VendorField and cannot be null");
            }
            this.Field = field;
        }

        /// <summary>
        /// The vendor package it is included in
        /// </summary>
        /// <value>The vendor package it is included in</value>
        [DataMember(Name = "package", IsRequired = true, EmitDefaultValue = true)]
        public string Package { get; set; }

        /// <summary>
        /// The name of the field
        /// </summary>
        /// <value>The name of the field</value>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public string Field { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorField {\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorField);
        }

        /// <summary>
        /// Returns true if VendorField instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorField input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Package == input.Package ||
                    (this.Package != null &&
                    this.Package.Equals(input.Package))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Package != null)
                {
                    hashCode = (hashCode * 59) + this.Package.GetHashCode();
                }
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
