/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Shows details relevant to update events for a query
    /// </summary>
    [DataContract(Name = "ProcessUpdateResult")]
    public partial class ProcessUpdateResult : IEquatable<ProcessUpdateResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessUpdateResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessUpdateResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessUpdateResult" /> class.
        /// </summary>
        /// <param name="domain">domain (required).</param>
        /// <param name="entryId">entryId (required).</param>
        /// <param name="processName">processName (required).</param>
        /// <param name="runId">runId (required).</param>
        /// <param name="entryDate">entryDate (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="schemaVersion">schemaVersion.</param>
        public ProcessUpdateResult(string domain = default(string), string entryId = default(string), string processName = default(string), string runId = default(string), DateTimeOffset entryDate = default(DateTimeOffset), string status = default(string), string message = default(string), string schemaVersion = default(string))
        {
            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new ArgumentNullException("domain is a required property for ProcessUpdateResult and cannot be null");
            }
            this.Domain = domain;
            // to ensure "entryId" is required (not null)
            if (entryId == null)
            {
                throw new ArgumentNullException("entryId is a required property for ProcessUpdateResult and cannot be null");
            }
            this.EntryId = entryId;
            // to ensure "processName" is required (not null)
            if (processName == null)
            {
                throw new ArgumentNullException("processName is a required property for ProcessUpdateResult and cannot be null");
            }
            this.ProcessName = processName;
            // to ensure "runId" is required (not null)
            if (runId == null)
            {
                throw new ArgumentNullException("runId is a required property for ProcessUpdateResult and cannot be null");
            }
            this.RunId = runId;
            this.EntryDate = entryDate;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ProcessUpdateResult and cannot be null");
            }
            this.Status = status;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for ProcessUpdateResult and cannot be null");
            }
            this.Message = message;
            this.SchemaVersion = schemaVersion;
        }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = true)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets EntryId
        /// </summary>
        [DataMember(Name = "entryId", IsRequired = true, EmitDefaultValue = true)]
        public string EntryId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessName
        /// </summary>
        [DataMember(Name = "processName", IsRequired = true, EmitDefaultValue = true)]
        public string ProcessName { get; set; }

        /// <summary>
        /// Gets or Sets RunId
        /// </summary>
        [DataMember(Name = "runId", IsRequired = true, EmitDefaultValue = true)]
        public string RunId { get; set; }

        /// <summary>
        /// Gets or Sets EntryDate
        /// </summary>
        [DataMember(Name = "entryDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EntryDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [DataMember(Name = "schemaVersion", EmitDefaultValue = true)]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessUpdateResult {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  EntryId: ").Append(EntryId).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  EntryDate: ").Append(EntryDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessUpdateResult);
        }

        /// <summary>
        /// Returns true if ProcessUpdateResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessUpdateResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessUpdateResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.EntryId == input.EntryId ||
                    (this.EntryId != null &&
                    this.EntryId.Equals(input.EntryId))
                ) && 
                (
                    this.ProcessName == input.ProcessName ||
                    (this.ProcessName != null &&
                    this.ProcessName.Equals(input.ProcessName))
                ) && 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.EntryDate == input.EntryDate ||
                    (this.EntryDate != null &&
                    this.EntryDate.Equals(input.EntryDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.SchemaVersion == input.SchemaVersion ||
                    (this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(input.SchemaVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.EntryId != null)
                {
                    hashCode = (hashCode * 59) + this.EntryId.GetHashCode();
                }
                if (this.ProcessName != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessName.GetHashCode();
                }
                if (this.RunId != null)
                {
                    hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                }
                if (this.EntryDate != null)
                {
                    hashCode = (hashCode * 59) + this.EntryDate.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.SchemaVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SchemaVersion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
