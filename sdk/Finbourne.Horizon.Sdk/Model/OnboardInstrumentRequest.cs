/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// The full structure of a instrument creation / onboarding request
    /// </summary>
    [DataContract(Name = "OnboardInstrumentRequest")]
    public partial class OnboardInstrumentRequest : IEquatable<OnboardInstrumentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardInstrumentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnboardInstrumentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardInstrumentRequest" /> class.
        /// </summary>
        /// <param name="dataResults">Enumerable packed OpenFigi/PermId information used to create instruments (required).</param>
        /// <param name="primaryVendorKey">Primary vendor used to master instrument from Unknown to an asset type.</param>
        /// <param name="secondaryVendorKeys">Secondary vendors used to decorate additional properties.</param>
        public OnboardInstrumentRequest(List<OpenFigiPermIdResult> dataResults = default(List<OpenFigiPermIdResult>), string primaryVendorKey = default(string), List<string> secondaryVendorKeys = default(List<string>))
        {
            // to ensure "dataResults" is required (not null)
            if (dataResults == null)
            {
                throw new ArgumentNullException("dataResults is a required property for OnboardInstrumentRequest and cannot be null");
            }
            this.DataResults = dataResults;
            this.PrimaryVendorKey = primaryVendorKey;
            this.SecondaryVendorKeys = secondaryVendorKeys;
        }

        /// <summary>
        /// Enumerable packed OpenFigi/PermId information used to create instruments
        /// </summary>
        /// <value>Enumerable packed OpenFigi/PermId information used to create instruments</value>
        [DataMember(Name = "dataResults", IsRequired = true, EmitDefaultValue = true)]
        public List<OpenFigiPermIdResult> DataResults { get; set; }

        /// <summary>
        /// Primary vendor used to master instrument from Unknown to an asset type
        /// </summary>
        /// <value>Primary vendor used to master instrument from Unknown to an asset type</value>
        [DataMember(Name = "primaryVendorKey", EmitDefaultValue = true)]
        public string PrimaryVendorKey { get; set; }

        /// <summary>
        /// Secondary vendors used to decorate additional properties
        /// </summary>
        /// <value>Secondary vendors used to decorate additional properties</value>
        [DataMember(Name = "secondaryVendorKeys", EmitDefaultValue = true)]
        public List<string> SecondaryVendorKeys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OnboardInstrumentRequest {\n");
            sb.Append("  DataResults: ").Append(DataResults).Append("\n");
            sb.Append("  PrimaryVendorKey: ").Append(PrimaryVendorKey).Append("\n");
            sb.Append("  SecondaryVendorKeys: ").Append(SecondaryVendorKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnboardInstrumentRequest);
        }

        /// <summary>
        /// Returns true if OnboardInstrumentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OnboardInstrumentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnboardInstrumentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DataResults == input.DataResults ||
                    this.DataResults != null &&
                    input.DataResults != null &&
                    this.DataResults.SequenceEqual(input.DataResults)
                ) && 
                (
                    this.PrimaryVendorKey == input.PrimaryVendorKey ||
                    (this.PrimaryVendorKey != null &&
                    this.PrimaryVendorKey.Equals(input.PrimaryVendorKey))
                ) && 
                (
                    this.SecondaryVendorKeys == input.SecondaryVendorKeys ||
                    this.SecondaryVendorKeys != null &&
                    input.SecondaryVendorKeys != null &&
                    this.SecondaryVendorKeys.SequenceEqual(input.SecondaryVendorKeys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataResults != null)
                {
                    hashCode = (hashCode * 59) + this.DataResults.GetHashCode();
                }
                if (this.PrimaryVendorKey != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryVendorKey.GetHashCode();
                }
                if (this.SecondaryVendorKeys != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryVendorKeys.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
