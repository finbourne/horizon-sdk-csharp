/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Information about the nuber of rows processed.
    /// </summary>
    [DataContract(Name = "RowDetails")]
    public partial class RowDetails : IEquatable<RowDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RowDetails" /> class.
        /// </summary>
        /// <param name="rowsTotal">The number of rows processed..</param>
        /// <param name="rowsSucceeded">The number of rows that were successfully processed..</param>
        /// <param name="rowsIgnored">The number of rows that were not processed..</param>
        /// <param name="rowsFailed">The number of rows that failed when being processed..</param>
        public RowDetails(int? rowsTotal = default(int?), int? rowsSucceeded = default(int?), int? rowsIgnored = default(int?), int? rowsFailed = default(int?))
        {
            this.RowsTotal = rowsTotal;
            this.RowsSucceeded = rowsSucceeded;
            this.RowsIgnored = rowsIgnored;
            this.RowsFailed = rowsFailed;
        }

        /// <summary>
        /// The number of rows processed.
        /// </summary>
        /// <value>The number of rows processed.</value>
        [DataMember(Name = "rowsTotal", EmitDefaultValue = true)]
        public int? RowsTotal { get; set; }

        /// <summary>
        /// The number of rows that were successfully processed.
        /// </summary>
        /// <value>The number of rows that were successfully processed.</value>
        [DataMember(Name = "rowsSucceeded", EmitDefaultValue = true)]
        public int? RowsSucceeded { get; set; }

        /// <summary>
        /// The number of rows that were not processed.
        /// </summary>
        /// <value>The number of rows that were not processed.</value>
        [DataMember(Name = "rowsIgnored", EmitDefaultValue = true)]
        public int? RowsIgnored { get; set; }

        /// <summary>
        /// The number of rows that failed when being processed.
        /// </summary>
        /// <value>The number of rows that failed when being processed.</value>
        [DataMember(Name = "rowsFailed", EmitDefaultValue = true)]
        public int? RowsFailed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RowDetails {\n");
            sb.Append("  RowsTotal: ").Append(RowsTotal).Append("\n");
            sb.Append("  RowsSucceeded: ").Append(RowsSucceeded).Append("\n");
            sb.Append("  RowsIgnored: ").Append(RowsIgnored).Append("\n");
            sb.Append("  RowsFailed: ").Append(RowsFailed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RowDetails);
        }

        /// <summary>
        /// Returns true if RowDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of RowDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RowDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RowsTotal == input.RowsTotal ||
                    (this.RowsTotal != null &&
                    this.RowsTotal.Equals(input.RowsTotal))
                ) && 
                (
                    this.RowsSucceeded == input.RowsSucceeded ||
                    (this.RowsSucceeded != null &&
                    this.RowsSucceeded.Equals(input.RowsSucceeded))
                ) && 
                (
                    this.RowsIgnored == input.RowsIgnored ||
                    (this.RowsIgnored != null &&
                    this.RowsIgnored.Equals(input.RowsIgnored))
                ) && 
                (
                    this.RowsFailed == input.RowsFailed ||
                    (this.RowsFailed != null &&
                    this.RowsFailed.Equals(input.RowsFailed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RowsTotal != null)
                {
                    hashCode = (hashCode * 59) + this.RowsTotal.GetHashCode();
                }
                if (this.RowsSucceeded != null)
                {
                    hashCode = (hashCode * 59) + this.RowsSucceeded.GetHashCode();
                }
                if (this.RowsIgnored != null)
                {
                    hashCode = (hashCode * 59) + this.RowsIgnored.GetHashCode();
                }
                if (this.RowsFailed != null)
                {
                    hashCode = (hashCode * 59) + this.RowsFailed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
