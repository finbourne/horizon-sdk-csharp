/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Required information for each process
    /// </summary>
    [DataContract(Name = "ProcessInformation")]
    public partial class ProcessInformation : IEquatable<ProcessInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInformation" /> class.
        /// </summary>
        /// <param name="domain">domain (required).</param>
        /// <param name="processName">processName (required).</param>
        /// <param name="runId">runId (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="dataAction">dataAction (required).</param>
        /// <param name="schemaVersion">schemaVersion.</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="processSummary">processSummary.</param>
        public ProcessInformation(string domain = default(string), string processName = default(string), string runId = default(string), DateTimeOffset startTime = default(DateTimeOffset), string dataAction = default(string), string schemaVersion = default(string), string userId = default(string), ProcessSummary processSummary = default(ProcessSummary))
        {
            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new ArgumentNullException("domain is a required property for ProcessInformation and cannot be null");
            }
            this.Domain = domain;
            // to ensure "processName" is required (not null)
            if (processName == null)
            {
                throw new ArgumentNullException("processName is a required property for ProcessInformation and cannot be null");
            }
            this.ProcessName = processName;
            // to ensure "runId" is required (not null)
            if (runId == null)
            {
                throw new ArgumentNullException("runId is a required property for ProcessInformation and cannot be null");
            }
            this.RunId = runId;
            this.StartTime = startTime;
            // to ensure "dataAction" is required (not null)
            if (dataAction == null)
            {
                throw new ArgumentNullException("dataAction is a required property for ProcessInformation and cannot be null");
            }
            this.DataAction = dataAction;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for ProcessInformation and cannot be null");
            }
            this.UserId = userId;
            this.SchemaVersion = schemaVersion;
            this.ProcessSummary = processSummary;
        }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = true)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets ProcessName
        /// </summary>
        [DataMember(Name = "processName", IsRequired = true, EmitDefaultValue = true)]
        public string ProcessName { get; set; }

        /// <summary>
        /// Gets or Sets RunId
        /// </summary>
        [DataMember(Name = "runId", IsRequired = true, EmitDefaultValue = true)]
        public string RunId { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// Gets or Sets DataAction
        /// </summary>
        [DataMember(Name = "dataAction", IsRequired = true, EmitDefaultValue = true)]
        public string DataAction { get; set; }

        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [DataMember(Name = "schemaVersion", EmitDefaultValue = true)]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessSummary
        /// </summary>
        [DataMember(Name = "processSummary", EmitDefaultValue = false)]
        public ProcessSummary ProcessSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessInformation {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  DataAction: ").Append(DataAction).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ProcessSummary: ").Append(ProcessSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessInformation);
        }

        /// <summary>
        /// Returns true if ProcessInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.ProcessName == input.ProcessName ||
                    (this.ProcessName != null &&
                    this.ProcessName.Equals(input.ProcessName))
                ) && 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.DataAction == input.DataAction ||
                    (this.DataAction != null &&
                    this.DataAction.Equals(input.DataAction))
                ) && 
                (
                    this.SchemaVersion == input.SchemaVersion ||
                    (this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(input.SchemaVersion))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ProcessSummary == input.ProcessSummary ||
                    (this.ProcessSummary != null &&
                    this.ProcessSummary.Equals(input.ProcessSummary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.ProcessName != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessName.GetHashCode();
                }
                if (this.RunId != null)
                {
                    hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.DataAction != null)
                {
                    hashCode = (hashCode * 59) + this.DataAction.GetHashCode();
                }
                if (this.SchemaVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SchemaVersion.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.ProcessSummary != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessSummary.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
