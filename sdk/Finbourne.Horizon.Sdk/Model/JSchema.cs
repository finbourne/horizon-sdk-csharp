/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// JSchema
    /// </summary>
    [DataContract(Name = "JSchema")]
    public partial class JSchema : IEquatable<JSchema>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public JSchemaType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JSchema" /> class.
        /// </summary>
        /// <param name="schemaVersion">schemaVersion.</param>
        /// <param name="valid">valid.</param>
        /// <param name="reference">reference.</param>
        /// <param name="varRef">varRef.</param>
        /// <param name="recursiveReference">recursiveReference.</param>
        /// <param name="recursiveAnchor">recursiveAnchor.</param>
        /// <param name="id">id.</param>
        /// <param name="anchor">anchor.</param>
        /// <param name="type">type.</param>
        /// <param name="varDefault">varDefault.</param>
        /// <param name="itemsPositionValidation">itemsPositionValidation (required).</param>
        /// <param name="varIf">varIf.</param>
        /// <param name="then">then.</param>
        /// <param name="varElse">varElse.</param>
        /// <param name="not">not.</param>
        /// <param name="contains">contains.</param>
        /// <param name="propertyNames">propertyNames.</param>
        /// <param name="varConst">varConst.</param>
        /// <param name="uniqueItems">uniqueItems (required).</param>
        /// <param name="minimumLength">minimumLength.</param>
        /// <param name="maximumLength">maximumLength.</param>
        /// <param name="minimum">minimum.</param>
        /// <param name="maximum">maximum.</param>
        /// <param name="exclusiveMinimum">exclusiveMinimum (required).</param>
        /// <param name="exclusiveMaximum">exclusiveMaximum (required).</param>
        /// <param name="minimumItems">minimumItems.</param>
        /// <param name="maximumItems">maximumItems.</param>
        /// <param name="minimumProperties">minimumProperties.</param>
        /// <param name="maximumProperties">maximumProperties.</param>
        /// <param name="minimumContains">minimumContains.</param>
        /// <param name="maximumContains">maximumContains.</param>
        /// <param name="contentEncoding">contentEncoding.</param>
        /// <param name="contentMediaType">contentMediaType.</param>
        /// <param name="writeOnly">writeOnly.</param>
        /// <param name="readOnly">readOnly.</param>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="multipleOf">multipleOf.</param>
        /// <param name="pattern">pattern.</param>
        /// <param name="additionalProperties">additionalProperties.</param>
        /// <param name="allowAdditionalProperties">allowAdditionalProperties (required).</param>
        /// <param name="allowAdditionalPropertiesSpecified">allowAdditionalPropertiesSpecified (required).</param>
        /// <param name="unevaluatedProperties">unevaluatedProperties.</param>
        /// <param name="allowUnevaluatedProperties">allowUnevaluatedProperties.</param>
        /// <param name="additionalItems">additionalItems.</param>
        /// <param name="allowAdditionalItems">allowAdditionalItems (required).</param>
        /// <param name="allowAdditionalItemsSpecified">allowAdditionalItemsSpecified (required).</param>
        /// <param name="unevaluatedItems">unevaluatedItems.</param>
        /// <param name="allowUnevaluatedItems">allowUnevaluatedItems.</param>
        /// <param name="format">format.</param>
        public JSchema(string schemaVersion = default(string), bool? valid = default(bool?), string reference = default(string), JSchema varRef = default(JSchema), string recursiveReference = default(string), bool? recursiveAnchor = default(bool?), string id = default(string), string anchor = default(string), JSchemaType? type = default(JSchemaType?), Object varDefault = default(Object), bool itemsPositionValidation = default(bool), JSchema varIf = default(JSchema), JSchema then = default(JSchema), JSchema varElse = default(JSchema), JSchema not = default(JSchema), JSchema contains = default(JSchema), JSchema propertyNames = default(JSchema), Object varConst = default(Object), bool uniqueItems = default(bool), long? minimumLength = default(long?), long? maximumLength = default(long?), decimal? minimum = default(decimal?), decimal? maximum = default(decimal?), bool exclusiveMinimum = default(bool), bool exclusiveMaximum = default(bool), long? minimumItems = default(long?), long? maximumItems = default(long?), long? minimumProperties = default(long?), long? maximumProperties = default(long?), long? minimumContains = default(long?), long? maximumContains = default(long?), string contentEncoding = default(string), string contentMediaType = default(string), bool? writeOnly = default(bool?), bool? readOnly = default(bool?), string title = default(string), string description = default(string), decimal? multipleOf = default(decimal?), string pattern = default(string), JSchema additionalProperties = default(JSchema), bool allowAdditionalProperties = default(bool), bool allowAdditionalPropertiesSpecified = default(bool), JSchema unevaluatedProperties = default(JSchema), bool? allowUnevaluatedProperties = default(bool?), JSchema additionalItems = default(JSchema), bool allowAdditionalItems = default(bool), bool allowAdditionalItemsSpecified = default(bool), JSchema unevaluatedItems = default(JSchema), bool? allowUnevaluatedItems = default(bool?), string format = default(string))
        {
            this.ItemsPositionValidation = itemsPositionValidation;
            this.UniqueItems = uniqueItems;
            this.ExclusiveMinimum = exclusiveMinimum;
            this.ExclusiveMaximum = exclusiveMaximum;
            this.AllowAdditionalProperties = allowAdditionalProperties;
            this.AllowAdditionalPropertiesSpecified = allowAdditionalPropertiesSpecified;
            this.AllowAdditionalItems = allowAdditionalItems;
            this.AllowAdditionalItemsSpecified = allowAdditionalItemsSpecified;
            this.SchemaVersion = schemaVersion;
            this.Valid = valid;
            this.Reference = reference;
            this.Ref = varRef;
            this.RecursiveReference = recursiveReference;
            this.RecursiveAnchor = recursiveAnchor;
            this.Id = id;
            this.Anchor = anchor;
            this.Type = type;
            this.Default = varDefault;
            this.If = varIf;
            this.Then = then;
            this.Else = varElse;
            this.Not = not;
            this.Contains = contains;
            this.PropertyNames = propertyNames;
            this.Const = varConst;
            this.MinimumLength = minimumLength;
            this.MaximumLength = maximumLength;
            this.Minimum = minimum;
            this.Maximum = maximum;
            this.MinimumItems = minimumItems;
            this.MaximumItems = maximumItems;
            this.MinimumProperties = minimumProperties;
            this.MaximumProperties = maximumProperties;
            this.MinimumContains = minimumContains;
            this.MaximumContains = maximumContains;
            this.ContentEncoding = contentEncoding;
            this.ContentMediaType = contentMediaType;
            this.WriteOnly = writeOnly;
            this.ReadOnly = readOnly;
            this.Title = title;
            this.Description = description;
            this.MultipleOf = multipleOf;
            this.Pattern = pattern;
            this.AdditionalProperties = additionalProperties;
            this.UnevaluatedProperties = unevaluatedProperties;
            this.AllowUnevaluatedProperties = allowUnevaluatedProperties;
            this.AdditionalItems = additionalItems;
            this.UnevaluatedItems = unevaluatedItems;
            this.AllowUnevaluatedItems = allowUnevaluatedItems;
            this.Format = format;
        }

        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [DataMember(Name = "schemaVersion", EmitDefaultValue = true)]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "valid", EmitDefaultValue = true)]
        public bool? Valid { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Ref
        /// </summary>
        [DataMember(Name = "ref", EmitDefaultValue = false)]
        public JSchema Ref { get; set; }

        /// <summary>
        /// Gets or Sets RecursiveReference
        /// </summary>
        [DataMember(Name = "recursiveReference", EmitDefaultValue = true)]
        public string RecursiveReference { get; set; }

        /// <summary>
        /// Gets or Sets RecursiveAnchor
        /// </summary>
        [DataMember(Name = "recursiveAnchor", EmitDefaultValue = true)]
        public bool? RecursiveAnchor { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Anchor
        /// </summary>
        [DataMember(Name = "anchor", EmitDefaultValue = true)]
        public string Anchor { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public Object Default { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, JSchema> Properties { get; private set; }

        /// <summary>
        /// Returns false as Properties should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProperties()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<JSchema> Items { get; private set; }

        /// <summary>
        /// Returns false as Items should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItems()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ItemsPositionValidation
        /// </summary>
        [DataMember(Name = "itemsPositionValidation", IsRequired = true, EmitDefaultValue = true)]
        public bool ItemsPositionValidation { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "required", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Required { get; private set; }

        /// <summary>
        /// Returns false as Required should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequired()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AllOf
        /// </summary>
        [DataMember(Name = "allOf", IsRequired = true, EmitDefaultValue = true)]
        public List<JSchema> AllOf { get; private set; }

        /// <summary>
        /// Returns false as AllOf should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllOf()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AnyOf
        /// </summary>
        [DataMember(Name = "anyOf", IsRequired = true, EmitDefaultValue = true)]
        public List<JSchema> AnyOf { get; private set; }

        /// <summary>
        /// Returns false as AnyOf should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAnyOf()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets OneOf
        /// </summary>
        [DataMember(Name = "oneOf", IsRequired = true, EmitDefaultValue = true)]
        public List<JSchema> OneOf { get; private set; }

        /// <summary>
        /// Returns false as OneOf should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOneOf()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets If
        /// </summary>
        [DataMember(Name = "if", EmitDefaultValue = false)]
        public JSchema If { get; set; }

        /// <summary>
        /// Gets or Sets Then
        /// </summary>
        [DataMember(Name = "then", EmitDefaultValue = false)]
        public JSchema Then { get; set; }

        /// <summary>
        /// Gets or Sets Else
        /// </summary>
        [DataMember(Name = "else", EmitDefaultValue = false)]
        public JSchema Else { get; set; }

        /// <summary>
        /// Gets or Sets Not
        /// </summary>
        [DataMember(Name = "not", EmitDefaultValue = false)]
        public JSchema Not { get; set; }

        /// <summary>
        /// Gets or Sets Contains
        /// </summary>
        [DataMember(Name = "contains", EmitDefaultValue = false)]
        public JSchema Contains { get; set; }

        /// <summary>
        /// Gets or Sets PropertyNames
        /// </summary>
        [DataMember(Name = "propertyNames", EmitDefaultValue = false)]
        public JSchema PropertyNames { get; set; }

        /// <summary>
        /// Gets or Sets Enum
        /// </summary>
        [DataMember(Name = "enum", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Enum { get; private set; }

        /// <summary>
        /// Returns false as Enum should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEnum()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Const
        /// </summary>
        [DataMember(Name = "const", EmitDefaultValue = true)]
        public Object Const { get; set; }

        /// <summary>
        /// Gets or Sets UniqueItems
        /// </summary>
        [DataMember(Name = "uniqueItems", IsRequired = true, EmitDefaultValue = true)]
        public bool UniqueItems { get; set; }

        /// <summary>
        /// Gets or Sets MinimumLength
        /// </summary>
        [DataMember(Name = "minimumLength", EmitDefaultValue = true)]
        public long? MinimumLength { get; set; }

        /// <summary>
        /// Gets or Sets MaximumLength
        /// </summary>
        [DataMember(Name = "maximumLength", EmitDefaultValue = true)]
        public long? MaximumLength { get; set; }

        /// <summary>
        /// Gets or Sets Minimum
        /// </summary>
        [DataMember(Name = "minimum", EmitDefaultValue = true)]
        public decimal? Minimum { get; set; }

        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>
        [DataMember(Name = "maximum", EmitDefaultValue = true)]
        public decimal? Maximum { get; set; }

        /// <summary>
        /// Gets or Sets ExclusiveMinimum
        /// </summary>
        [DataMember(Name = "exclusiveMinimum", IsRequired = true, EmitDefaultValue = true)]
        public bool ExclusiveMinimum { get; set; }

        /// <summary>
        /// Gets or Sets ExclusiveMaximum
        /// </summary>
        [DataMember(Name = "exclusiveMaximum", IsRequired = true, EmitDefaultValue = true)]
        public bool ExclusiveMaximum { get; set; }

        /// <summary>
        /// Gets or Sets MinimumItems
        /// </summary>
        [DataMember(Name = "minimumItems", EmitDefaultValue = true)]
        public long? MinimumItems { get; set; }

        /// <summary>
        /// Gets or Sets MaximumItems
        /// </summary>
        [DataMember(Name = "maximumItems", EmitDefaultValue = true)]
        public long? MaximumItems { get; set; }

        /// <summary>
        /// Gets or Sets MinimumProperties
        /// </summary>
        [DataMember(Name = "minimumProperties", EmitDefaultValue = true)]
        public long? MinimumProperties { get; set; }

        /// <summary>
        /// Gets or Sets MaximumProperties
        /// </summary>
        [DataMember(Name = "maximumProperties", EmitDefaultValue = true)]
        public long? MaximumProperties { get; set; }

        /// <summary>
        /// Gets or Sets MinimumContains
        /// </summary>
        [DataMember(Name = "minimumContains", EmitDefaultValue = true)]
        public long? MinimumContains { get; set; }

        /// <summary>
        /// Gets or Sets MaximumContains
        /// </summary>
        [DataMember(Name = "maximumContains", EmitDefaultValue = true)]
        public long? MaximumContains { get; set; }

        /// <summary>
        /// Gets or Sets ContentEncoding
        /// </summary>
        [DataMember(Name = "contentEncoding", EmitDefaultValue = true)]
        public string ContentEncoding { get; set; }

        /// <summary>
        /// Gets or Sets ContentMediaType
        /// </summary>
        [DataMember(Name = "contentMediaType", EmitDefaultValue = true)]
        public string ContentMediaType { get; set; }

        /// <summary>
        /// Gets or Sets WriteOnly
        /// </summary>
        [DataMember(Name = "writeOnly", EmitDefaultValue = true)]
        public bool? WriteOnly { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionData
        /// </summary>
        [DataMember(Name = "extensionData", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> ExtensionData { get; private set; }

        /// <summary>
        /// Returns false as ExtensionData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExtensionData()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets MultipleOf
        /// </summary>
        [DataMember(Name = "multipleOf", EmitDefaultValue = true)]
        public decimal? MultipleOf { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name = "pattern", EmitDefaultValue = true)]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or Sets Dependencies
        /// </summary>
        [DataMember(Name = "dependencies", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Dependencies { get; private set; }

        /// <summary>
        /// Returns false as Dependencies should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDependencies()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DependentRequired
        /// </summary>
        [DataMember(Name = "dependentRequired", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, List<string>> DependentRequired { get; private set; }

        /// <summary>
        /// Returns false as DependentRequired should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDependentRequired()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DependentSchemas
        /// </summary>
        [DataMember(Name = "dependentSchemas", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, JSchema> DependentSchemas { get; private set; }

        /// <summary>
        /// Returns false as DependentSchemas should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDependentSchemas()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PatternProperties
        /// </summary>
        [DataMember(Name = "patternProperties", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, JSchema> PatternProperties { get; private set; }

        /// <summary>
        /// Returns false as PatternProperties should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePatternProperties()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AdditionalProperties
        /// </summary>
        [DataMember(Name = "additionalProperties", EmitDefaultValue = false)]
        public JSchema AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or Sets AllowAdditionalProperties
        /// </summary>
        [DataMember(Name = "allowAdditionalProperties", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAdditionalProperties { get; set; }

        /// <summary>
        /// Gets or Sets AllowAdditionalPropertiesSpecified
        /// </summary>
        [DataMember(Name = "allowAdditionalPropertiesSpecified", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAdditionalPropertiesSpecified { get; set; }

        /// <summary>
        /// Gets or Sets UnevaluatedProperties
        /// </summary>
        [DataMember(Name = "unevaluatedProperties", EmitDefaultValue = false)]
        public JSchema UnevaluatedProperties { get; set; }

        /// <summary>
        /// Gets or Sets AllowUnevaluatedProperties
        /// </summary>
        [DataMember(Name = "allowUnevaluatedProperties", EmitDefaultValue = true)]
        public bool? AllowUnevaluatedProperties { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalItems
        /// </summary>
        [DataMember(Name = "additionalItems", EmitDefaultValue = false)]
        public JSchema AdditionalItems { get; set; }

        /// <summary>
        /// Gets or Sets AllowAdditionalItems
        /// </summary>
        [DataMember(Name = "allowAdditionalItems", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAdditionalItems { get; set; }

        /// <summary>
        /// Gets or Sets AllowAdditionalItemsSpecified
        /// </summary>
        [DataMember(Name = "allowAdditionalItemsSpecified", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAdditionalItemsSpecified { get; set; }

        /// <summary>
        /// Gets or Sets UnevaluatedItems
        /// </summary>
        [DataMember(Name = "unevaluatedItems", EmitDefaultValue = false)]
        public JSchema UnevaluatedItems { get; set; }

        /// <summary>
        /// Gets or Sets AllowUnevaluatedItems
        /// </summary>
        [DataMember(Name = "allowUnevaluatedItems", EmitDefaultValue = true)]
        public bool? AllowUnevaluatedItems { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = true)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets Validators
        /// </summary>
        [DataMember(Name = "validators", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Validators { get; private set; }

        /// <summary>
        /// Returns false as Validators should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidators()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JSchema {\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  RecursiveReference: ").Append(RecursiveReference).Append("\n");
            sb.Append("  RecursiveAnchor: ").Append(RecursiveAnchor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ItemsPositionValidation: ").Append(ItemsPositionValidation).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  AllOf: ").Append(AllOf).Append("\n");
            sb.Append("  AnyOf: ").Append(AnyOf).Append("\n");
            sb.Append("  OneOf: ").Append(OneOf).Append("\n");
            sb.Append("  If: ").Append(If).Append("\n");
            sb.Append("  Then: ").Append(Then).Append("\n");
            sb.Append("  Else: ").Append(Else).Append("\n");
            sb.Append("  Not: ").Append(Not).Append("\n");
            sb.Append("  Contains: ").Append(Contains).Append("\n");
            sb.Append("  PropertyNames: ").Append(PropertyNames).Append("\n");
            sb.Append("  Enum: ").Append(Enum).Append("\n");
            sb.Append("  Const: ").Append(Const).Append("\n");
            sb.Append("  UniqueItems: ").Append(UniqueItems).Append("\n");
            sb.Append("  MinimumLength: ").Append(MinimumLength).Append("\n");
            sb.Append("  MaximumLength: ").Append(MaximumLength).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  ExclusiveMinimum: ").Append(ExclusiveMinimum).Append("\n");
            sb.Append("  ExclusiveMaximum: ").Append(ExclusiveMaximum).Append("\n");
            sb.Append("  MinimumItems: ").Append(MinimumItems).Append("\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  MinimumProperties: ").Append(MinimumProperties).Append("\n");
            sb.Append("  MaximumProperties: ").Append(MaximumProperties).Append("\n");
            sb.Append("  MinimumContains: ").Append(MinimumContains).Append("\n");
            sb.Append("  MaximumContains: ").Append(MaximumContains).Append("\n");
            sb.Append("  ContentEncoding: ").Append(ContentEncoding).Append("\n");
            sb.Append("  ContentMediaType: ").Append(ContentMediaType).Append("\n");
            sb.Append("  WriteOnly: ").Append(WriteOnly).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  ExtensionData: ").Append(ExtensionData).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MultipleOf: ").Append(MultipleOf).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  DependentRequired: ").Append(DependentRequired).Append("\n");
            sb.Append("  DependentSchemas: ").Append(DependentSchemas).Append("\n");
            sb.Append("  PatternProperties: ").Append(PatternProperties).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  AllowAdditionalProperties: ").Append(AllowAdditionalProperties).Append("\n");
            sb.Append("  AllowAdditionalPropertiesSpecified: ").Append(AllowAdditionalPropertiesSpecified).Append("\n");
            sb.Append("  UnevaluatedProperties: ").Append(UnevaluatedProperties).Append("\n");
            sb.Append("  AllowUnevaluatedProperties: ").Append(AllowUnevaluatedProperties).Append("\n");
            sb.Append("  AdditionalItems: ").Append(AdditionalItems).Append("\n");
            sb.Append("  AllowAdditionalItems: ").Append(AllowAdditionalItems).Append("\n");
            sb.Append("  AllowAdditionalItemsSpecified: ").Append(AllowAdditionalItemsSpecified).Append("\n");
            sb.Append("  UnevaluatedItems: ").Append(UnevaluatedItems).Append("\n");
            sb.Append("  AllowUnevaluatedItems: ").Append(AllowUnevaluatedItems).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Validators: ").Append(Validators).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JSchema);
        }

        /// <summary>
        /// Returns true if JSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of JSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSchema input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SchemaVersion == input.SchemaVersion ||
                    (this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(input.SchemaVersion))
                ) && 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Ref == input.Ref ||
                    (this.Ref != null &&
                    this.Ref.Equals(input.Ref))
                ) && 
                (
                    this.RecursiveReference == input.RecursiveReference ||
                    (this.RecursiveReference != null &&
                    this.RecursiveReference.Equals(input.RecursiveReference))
                ) && 
                (
                    this.RecursiveAnchor == input.RecursiveAnchor ||
                    (this.RecursiveAnchor != null &&
                    this.RecursiveAnchor.Equals(input.RecursiveAnchor))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Anchor == input.Anchor ||
                    (this.Anchor != null &&
                    this.Anchor.Equals(input.Anchor))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Default == input.Default ||
                    (this.Default != null &&
                    this.Default.Equals(input.Default))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.ItemsPositionValidation == input.ItemsPositionValidation ||
                    this.ItemsPositionValidation.Equals(input.ItemsPositionValidation)
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required != null &&
                    input.Required != null &&
                    this.Required.SequenceEqual(input.Required)
                ) && 
                (
                    this.AllOf == input.AllOf ||
                    this.AllOf != null &&
                    input.AllOf != null &&
                    this.AllOf.SequenceEqual(input.AllOf)
                ) && 
                (
                    this.AnyOf == input.AnyOf ||
                    this.AnyOf != null &&
                    input.AnyOf != null &&
                    this.AnyOf.SequenceEqual(input.AnyOf)
                ) && 
                (
                    this.OneOf == input.OneOf ||
                    this.OneOf != null &&
                    input.OneOf != null &&
                    this.OneOf.SequenceEqual(input.OneOf)
                ) && 
                (
                    this.If == input.If ||
                    (this.If != null &&
                    this.If.Equals(input.If))
                ) && 
                (
                    this.Then == input.Then ||
                    (this.Then != null &&
                    this.Then.Equals(input.Then))
                ) && 
                (
                    this.Else == input.Else ||
                    (this.Else != null &&
                    this.Else.Equals(input.Else))
                ) && 
                (
                    this.Not == input.Not ||
                    (this.Not != null &&
                    this.Not.Equals(input.Not))
                ) && 
                (
                    this.Contains == input.Contains ||
                    (this.Contains != null &&
                    this.Contains.Equals(input.Contains))
                ) && 
                (
                    this.PropertyNames == input.PropertyNames ||
                    (this.PropertyNames != null &&
                    this.PropertyNames.Equals(input.PropertyNames))
                ) && 
                (
                    this.Enum == input.Enum ||
                    this.Enum != null &&
                    input.Enum != null &&
                    this.Enum.SequenceEqual(input.Enum)
                ) && 
                (
                    this.Const == input.Const ||
                    (this.Const != null &&
                    this.Const.Equals(input.Const))
                ) && 
                (
                    this.UniqueItems == input.UniqueItems ||
                    this.UniqueItems.Equals(input.UniqueItems)
                ) && 
                (
                    this.MinimumLength == input.MinimumLength ||
                    (this.MinimumLength != null &&
                    this.MinimumLength.Equals(input.MinimumLength))
                ) && 
                (
                    this.MaximumLength == input.MaximumLength ||
                    (this.MaximumLength != null &&
                    this.MaximumLength.Equals(input.MaximumLength))
                ) && 
                (
                    this.Minimum == input.Minimum ||
                    (this.Minimum != null &&
                    this.Minimum.Equals(input.Minimum))
                ) && 
                (
                    this.Maximum == input.Maximum ||
                    (this.Maximum != null &&
                    this.Maximum.Equals(input.Maximum))
                ) && 
                (
                    this.ExclusiveMinimum == input.ExclusiveMinimum ||
                    this.ExclusiveMinimum.Equals(input.ExclusiveMinimum)
                ) && 
                (
                    this.ExclusiveMaximum == input.ExclusiveMaximum ||
                    this.ExclusiveMaximum.Equals(input.ExclusiveMaximum)
                ) && 
                (
                    this.MinimumItems == input.MinimumItems ||
                    (this.MinimumItems != null &&
                    this.MinimumItems.Equals(input.MinimumItems))
                ) && 
                (
                    this.MaximumItems == input.MaximumItems ||
                    (this.MaximumItems != null &&
                    this.MaximumItems.Equals(input.MaximumItems))
                ) && 
                (
                    this.MinimumProperties == input.MinimumProperties ||
                    (this.MinimumProperties != null &&
                    this.MinimumProperties.Equals(input.MinimumProperties))
                ) && 
                (
                    this.MaximumProperties == input.MaximumProperties ||
                    (this.MaximumProperties != null &&
                    this.MaximumProperties.Equals(input.MaximumProperties))
                ) && 
                (
                    this.MinimumContains == input.MinimumContains ||
                    (this.MinimumContains != null &&
                    this.MinimumContains.Equals(input.MinimumContains))
                ) && 
                (
                    this.MaximumContains == input.MaximumContains ||
                    (this.MaximumContains != null &&
                    this.MaximumContains.Equals(input.MaximumContains))
                ) && 
                (
                    this.ContentEncoding == input.ContentEncoding ||
                    (this.ContentEncoding != null &&
                    this.ContentEncoding.Equals(input.ContentEncoding))
                ) && 
                (
                    this.ContentMediaType == input.ContentMediaType ||
                    (this.ContentMediaType != null &&
                    this.ContentMediaType.Equals(input.ContentMediaType))
                ) && 
                (
                    this.WriteOnly == input.WriteOnly ||
                    (this.WriteOnly != null &&
                    this.WriteOnly.Equals(input.WriteOnly))
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    (this.ReadOnly != null &&
                    this.ReadOnly.Equals(input.ReadOnly))
                ) && 
                (
                    this.ExtensionData == input.ExtensionData ||
                    this.ExtensionData != null &&
                    input.ExtensionData != null &&
                    this.ExtensionData.SequenceEqual(input.ExtensionData)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MultipleOf == input.MultipleOf ||
                    (this.MultipleOf != null &&
                    this.MultipleOf.Equals(input.MultipleOf))
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.Dependencies == input.Dependencies ||
                    this.Dependencies != null &&
                    input.Dependencies != null &&
                    this.Dependencies.SequenceEqual(input.Dependencies)
                ) && 
                (
                    this.DependentRequired == input.DependentRequired ||
                    this.DependentRequired != null &&
                    input.DependentRequired != null &&
                    this.DependentRequired.SequenceEqual(input.DependentRequired)
                ) && 
                (
                    this.DependentSchemas == input.DependentSchemas ||
                    this.DependentSchemas != null &&
                    input.DependentSchemas != null &&
                    this.DependentSchemas.SequenceEqual(input.DependentSchemas)
                ) && 
                (
                    this.PatternProperties == input.PatternProperties ||
                    this.PatternProperties != null &&
                    input.PatternProperties != null &&
                    this.PatternProperties.SequenceEqual(input.PatternProperties)
                ) && 
                (
                    this.AdditionalProperties == input.AdditionalProperties ||
                    (this.AdditionalProperties != null &&
                    this.AdditionalProperties.Equals(input.AdditionalProperties))
                ) && 
                (
                    this.AllowAdditionalProperties == input.AllowAdditionalProperties ||
                    this.AllowAdditionalProperties.Equals(input.AllowAdditionalProperties)
                ) && 
                (
                    this.AllowAdditionalPropertiesSpecified == input.AllowAdditionalPropertiesSpecified ||
                    this.AllowAdditionalPropertiesSpecified.Equals(input.AllowAdditionalPropertiesSpecified)
                ) && 
                (
                    this.UnevaluatedProperties == input.UnevaluatedProperties ||
                    (this.UnevaluatedProperties != null &&
                    this.UnevaluatedProperties.Equals(input.UnevaluatedProperties))
                ) && 
                (
                    this.AllowUnevaluatedProperties == input.AllowUnevaluatedProperties ||
                    (this.AllowUnevaluatedProperties != null &&
                    this.AllowUnevaluatedProperties.Equals(input.AllowUnevaluatedProperties))
                ) && 
                (
                    this.AdditionalItems == input.AdditionalItems ||
                    (this.AdditionalItems != null &&
                    this.AdditionalItems.Equals(input.AdditionalItems))
                ) && 
                (
                    this.AllowAdditionalItems == input.AllowAdditionalItems ||
                    this.AllowAdditionalItems.Equals(input.AllowAdditionalItems)
                ) && 
                (
                    this.AllowAdditionalItemsSpecified == input.AllowAdditionalItemsSpecified ||
                    this.AllowAdditionalItemsSpecified.Equals(input.AllowAdditionalItemsSpecified)
                ) && 
                (
                    this.UnevaluatedItems == input.UnevaluatedItems ||
                    (this.UnevaluatedItems != null &&
                    this.UnevaluatedItems.Equals(input.UnevaluatedItems))
                ) && 
                (
                    this.AllowUnevaluatedItems == input.AllowUnevaluatedItems ||
                    (this.AllowUnevaluatedItems != null &&
                    this.AllowUnevaluatedItems.Equals(input.AllowUnevaluatedItems))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Validators == input.Validators ||
                    this.Validators != null &&
                    input.Validators != null &&
                    this.Validators.SequenceEqual(input.Validators)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchemaVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SchemaVersion.GetHashCode();
                }
                if (this.Valid != null)
                {
                    hashCode = (hashCode * 59) + this.Valid.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.Ref != null)
                {
                    hashCode = (hashCode * 59) + this.Ref.GetHashCode();
                }
                if (this.RecursiveReference != null)
                {
                    hashCode = (hashCode * 59) + this.RecursiveReference.GetHashCode();
                }
                if (this.RecursiveAnchor != null)
                {
                    hashCode = (hashCode * 59) + this.RecursiveAnchor.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Anchor != null)
                {
                    hashCode = (hashCode * 59) + this.Anchor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Default != null)
                {
                    hashCode = (hashCode * 59) + this.Default.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemsPositionValidation.GetHashCode();
                if (this.Required != null)
                {
                    hashCode = (hashCode * 59) + this.Required.GetHashCode();
                }
                if (this.AllOf != null)
                {
                    hashCode = (hashCode * 59) + this.AllOf.GetHashCode();
                }
                if (this.AnyOf != null)
                {
                    hashCode = (hashCode * 59) + this.AnyOf.GetHashCode();
                }
                if (this.OneOf != null)
                {
                    hashCode = (hashCode * 59) + this.OneOf.GetHashCode();
                }
                if (this.If != null)
                {
                    hashCode = (hashCode * 59) + this.If.GetHashCode();
                }
                if (this.Then != null)
                {
                    hashCode = (hashCode * 59) + this.Then.GetHashCode();
                }
                if (this.Else != null)
                {
                    hashCode = (hashCode * 59) + this.Else.GetHashCode();
                }
                if (this.Not != null)
                {
                    hashCode = (hashCode * 59) + this.Not.GetHashCode();
                }
                if (this.Contains != null)
                {
                    hashCode = (hashCode * 59) + this.Contains.GetHashCode();
                }
                if (this.PropertyNames != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyNames.GetHashCode();
                }
                if (this.Enum != null)
                {
                    hashCode = (hashCode * 59) + this.Enum.GetHashCode();
                }
                if (this.Const != null)
                {
                    hashCode = (hashCode * 59) + this.Const.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UniqueItems.GetHashCode();
                if (this.MinimumLength != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumLength.GetHashCode();
                }
                if (this.MaximumLength != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumLength.GetHashCode();
                }
                if (this.Minimum != null)
                {
                    hashCode = (hashCode * 59) + this.Minimum.GetHashCode();
                }
                if (this.Maximum != null)
                {
                    hashCode = (hashCode * 59) + this.Maximum.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExclusiveMinimum.GetHashCode();
                hashCode = (hashCode * 59) + this.ExclusiveMaximum.GetHashCode();
                if (this.MinimumItems != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumItems.GetHashCode();
                }
                if (this.MaximumItems != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumItems.GetHashCode();
                }
                if (this.MinimumProperties != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumProperties.GetHashCode();
                }
                if (this.MaximumProperties != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumProperties.GetHashCode();
                }
                if (this.MinimumContains != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumContains.GetHashCode();
                }
                if (this.MaximumContains != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumContains.GetHashCode();
                }
                if (this.ContentEncoding != null)
                {
                    hashCode = (hashCode * 59) + this.ContentEncoding.GetHashCode();
                }
                if (this.ContentMediaType != null)
                {
                    hashCode = (hashCode * 59) + this.ContentMediaType.GetHashCode();
                }
                if (this.WriteOnly != null)
                {
                    hashCode = (hashCode * 59) + this.WriteOnly.GetHashCode();
                }
                if (this.ReadOnly != null)
                {
                    hashCode = (hashCode * 59) + this.ReadOnly.GetHashCode();
                }
                if (this.ExtensionData != null)
                {
                    hashCode = (hashCode * 59) + this.ExtensionData.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.MultipleOf != null)
                {
                    hashCode = (hashCode * 59) + this.MultipleOf.GetHashCode();
                }
                if (this.Pattern != null)
                {
                    hashCode = (hashCode * 59) + this.Pattern.GetHashCode();
                }
                if (this.Dependencies != null)
                {
                    hashCode = (hashCode * 59) + this.Dependencies.GetHashCode();
                }
                if (this.DependentRequired != null)
                {
                    hashCode = (hashCode * 59) + this.DependentRequired.GetHashCode();
                }
                if (this.DependentSchemas != null)
                {
                    hashCode = (hashCode * 59) + this.DependentSchemas.GetHashCode();
                }
                if (this.PatternProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PatternProperties.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowAdditionalProperties.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowAdditionalPropertiesSpecified.GetHashCode();
                if (this.UnevaluatedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.UnevaluatedProperties.GetHashCode();
                }
                if (this.AllowUnevaluatedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AllowUnevaluatedProperties.GetHashCode();
                }
                if (this.AdditionalItems != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalItems.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowAdditionalItems.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowAdditionalItemsSpecified.GetHashCode();
                if (this.UnevaluatedItems != null)
                {
                    hashCode = (hashCode * 59) + this.UnevaluatedItems.GetHashCode();
                }
                if (this.AllowUnevaluatedItems != null)
                {
                    hashCode = (hashCode * 59) + this.AllowUnevaluatedItems.GetHashCode();
                }
                if (this.Format != null)
                {
                    hashCode = (hashCode * 59) + this.Format.GetHashCode();
                }
                if (this.Validators != null)
                {
                    hashCode = (hashCode * 59) + this.Validators.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
