/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Response containing the description of an integration.
    /// </summary>
    [DataContract(Name = "IntegrationPropertyConfiguration")]
    public partial class IntegrationPropertyConfiguration : IEquatable<IntegrationPropertyConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationPropertyConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IntegrationPropertyConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationPropertyConfiguration" /> class.
        /// </summary>
        /// <param name="type">The Integration this property configuration applies to (required).</param>
        /// <param name="properties">The mandatory and optional properties available in this integration (required).</param>
        /// <param name="fields">The fields available in this integration (required).</param>
        public IntegrationPropertyConfiguration(string type = default(string), List<PropertyMapping> properties = default(List<PropertyMapping>), List<FieldMapping> fields = default(List<FieldMapping>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for IntegrationPropertyConfiguration and cannot be null");
            }
            this.Type = type;
            // to ensure "properties" is required (not null)
            if (properties == null)
            {
                throw new ArgumentNullException("properties is a required property for IntegrationPropertyConfiguration and cannot be null");
            }
            this.Properties = properties;
            // to ensure "fields" is required (not null)
            if (fields == null)
            {
                throw new ArgumentNullException("fields is a required property for IntegrationPropertyConfiguration and cannot be null");
            }
            this.Fields = fields;
        }

        /// <summary>
        /// The Integration this property configuration applies to
        /// </summary>
        /// <value>The Integration this property configuration applies to</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The mandatory and optional properties available in this integration
        /// </summary>
        /// <value>The mandatory and optional properties available in this integration</value>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = true)]
        public List<PropertyMapping> Properties { get; set; }

        /// <summary>
        /// The fields available in this integration
        /// </summary>
        /// <value>The fields available in this integration</value>
        [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = true)]
        public List<FieldMapping> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntegrationPropertyConfiguration {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntegrationPropertyConfiguration);
        }

        /// <summary>
        /// Returns true if IntegrationPropertyConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of IntegrationPropertyConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationPropertyConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Fields != null)
                {
                    hashCode = (hashCode * 59) + this.Fields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
