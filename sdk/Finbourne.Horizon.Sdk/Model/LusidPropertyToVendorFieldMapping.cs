/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// The mapping of a LUSID Property to the Vendor Field that would populate it
    /// </summary>
    [DataContract(Name = "LusidPropertyToVendorFieldMapping")]
    public partial class LusidPropertyToVendorFieldMapping : IEquatable<LusidPropertyToVendorFieldMapping>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Optionality
        /// </summary>
        [DataMember(Name = "optionality", IsRequired = true, EmitDefaultValue = true)]
        public Optionality Optionality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidPropertyToVendorFieldMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LusidPropertyToVendorFieldMapping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidPropertyToVendorFieldMapping" /> class.
        /// </summary>
        /// <param name="property">property (required).</param>
        /// <param name="vendorField">vendorField (required).</param>
        /// <param name="vendorPackage">vendorPackage (required).</param>
        /// <param name="vendorNamespace">vendorNamespace (required).</param>
        /// <param name="optionality">optionality (required).</param>
        public LusidPropertyToVendorFieldMapping(LusidPropertyDefinition property = default(LusidPropertyDefinition), string vendorField = default(string), string vendorPackage = default(string), string vendorNamespace = default(string), Optionality optionality = default(Optionality))
        {
            // to ensure "property" is required (not null)
            if (property == null)
            {
                throw new ArgumentNullException("property is a required property for LusidPropertyToVendorFieldMapping and cannot be null");
            }
            this.Property = property;
            // to ensure "vendorField" is required (not null)
            if (vendorField == null)
            {
                throw new ArgumentNullException("vendorField is a required property for LusidPropertyToVendorFieldMapping and cannot be null");
            }
            this.VendorField = vendorField;
            // to ensure "vendorPackage" is required (not null)
            if (vendorPackage == null)
            {
                throw new ArgumentNullException("vendorPackage is a required property for LusidPropertyToVendorFieldMapping and cannot be null");
            }
            this.VendorPackage = vendorPackage;
            // to ensure "vendorNamespace" is required (not null)
            if (vendorNamespace == null)
            {
                throw new ArgumentNullException("vendorNamespace is a required property for LusidPropertyToVendorFieldMapping and cannot be null");
            }
            this.VendorNamespace = vendorNamespace;
            this.Optionality = optionality;
        }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name = "property", IsRequired = true, EmitDefaultValue = true)]
        public LusidPropertyDefinition Property { get; set; }

        /// <summary>
        /// Gets or Sets VendorField
        /// </summary>
        [DataMember(Name = "vendorField", IsRequired = true, EmitDefaultValue = true)]
        public string VendorField { get; set; }

        /// <summary>
        /// Gets or Sets VendorPackage
        /// </summary>
        [DataMember(Name = "vendorPackage", IsRequired = true, EmitDefaultValue = true)]
        public string VendorPackage { get; set; }

        /// <summary>
        /// Gets or Sets VendorNamespace
        /// </summary>
        [DataMember(Name = "vendorNamespace", IsRequired = true, EmitDefaultValue = true)]
        public string VendorNamespace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LusidPropertyToVendorFieldMapping {\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  VendorField: ").Append(VendorField).Append("\n");
            sb.Append("  VendorPackage: ").Append(VendorPackage).Append("\n");
            sb.Append("  VendorNamespace: ").Append(VendorNamespace).Append("\n");
            sb.Append("  Optionality: ").Append(Optionality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LusidPropertyToVendorFieldMapping);
        }

        /// <summary>
        /// Returns true if LusidPropertyToVendorFieldMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of LusidPropertyToVendorFieldMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LusidPropertyToVendorFieldMapping input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.VendorField == input.VendorField ||
                    (this.VendorField != null &&
                    this.VendorField.Equals(input.VendorField))
                ) && 
                (
                    this.VendorPackage == input.VendorPackage ||
                    (this.VendorPackage != null &&
                    this.VendorPackage.Equals(input.VendorPackage))
                ) && 
                (
                    this.VendorNamespace == input.VendorNamespace ||
                    (this.VendorNamespace != null &&
                    this.VendorNamespace.Equals(input.VendorNamespace))
                ) && 
                (
                    this.Optionality == input.Optionality ||
                    this.Optionality.Equals(input.Optionality)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Property != null)
                {
                    hashCode = (hashCode * 59) + this.Property.GetHashCode();
                }
                if (this.VendorField != null)
                {
                    hashCode = (hashCode * 59) + this.VendorField.GetHashCode();
                }
                if (this.VendorPackage != null)
                {
                    hashCode = (hashCode * 59) + this.VendorPackage.GetHashCode();
                }
                if (this.VendorNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VendorNamespace.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Optionality.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
