/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Response type for Horizon Audit Event
    /// </summary>
    [DataContract(Name = "AuditCompleteResponse")]
    public partial class AuditCompleteResponse : IEquatable<AuditCompleteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditCompleteResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditCompleteResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditCompleteResponse" /> class.
        /// </summary>
        /// <param name="eventId">The GUID of the newly created event (required).</param>
        /// <param name="processName">The name of the Process the events will be visible under (required).</param>
        public AuditCompleteResponse(Guid eventId = default(Guid), string processName = default(string))
        {
            this.EventId = eventId;
            // to ensure "processName" is required (not null)
            if (processName == null)
            {
                throw new ArgumentNullException("processName is a required property for AuditCompleteResponse and cannot be null");
            }
            this.ProcessName = processName;
        }

        /// <summary>
        /// The GUID of the newly created event
        /// </summary>
        /// <value>The GUID of the newly created event</value>
        [DataMember(Name = "eventId", IsRequired = true, EmitDefaultValue = true)]
        public Guid EventId { get; set; }

        /// <summary>
        /// The name of the Process the events will be visible under
        /// </summary>
        /// <value>The name of the Process the events will be visible under</value>
        [DataMember(Name = "processName", IsRequired = true, EmitDefaultValue = true)]
        public string ProcessName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuditCompleteResponse {\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditCompleteResponse);
        }

        /// <summary>
        /// Returns true if AuditCompleteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditCompleteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditCompleteResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.ProcessName == input.ProcessName ||
                    (this.ProcessName != null &&
                    this.ProcessName.Equals(input.ProcessName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventId != null)
                {
                    hashCode = (hashCode * 59) + this.EventId.GetHashCode();
                }
                if (this.ProcessName != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
