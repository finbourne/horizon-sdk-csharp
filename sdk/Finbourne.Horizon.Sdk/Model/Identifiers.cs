/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// A list of lusid instrument ids
    /// </summary>
    [DataContract(Name = "Identifiers")]
    public partial class Identifiers : IEquatable<Identifiers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Identifiers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Identifiers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Identifiers" /> class.
        /// </summary>
        /// <param name="lusidInstrumentIds">The collection of LUSID instrument identifiers (required).</param>
        public Identifiers(List<string> lusidInstrumentIds = default(List<string>))
        {
            // to ensure "lusidInstrumentIds" is required (not null)
            if (lusidInstrumentIds == null)
            {
                throw new ArgumentNullException("lusidInstrumentIds is a required property for Identifiers and cannot be null");
            }
            this.LusidInstrumentIds = lusidInstrumentIds;
        }

        /// <summary>
        /// The collection of LUSID instrument identifiers
        /// </summary>
        /// <value>The collection of LUSID instrument identifiers</value>
        [DataMember(Name = "lusidInstrumentIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> LusidInstrumentIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Identifiers {\n");
            sb.Append("  LusidInstrumentIds: ").Append(LusidInstrumentIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Identifiers);
        }

        /// <summary>
        /// Returns true if Identifiers instances are equal
        /// </summary>
        /// <param name="input">Instance of Identifiers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identifiers input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LusidInstrumentIds == input.LusidInstrumentIds ||
                    this.LusidInstrumentIds != null &&
                    input.LusidInstrumentIds != null &&
                    this.LusidInstrumentIds.SequenceEqual(input.LusidInstrumentIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LusidInstrumentIds != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
