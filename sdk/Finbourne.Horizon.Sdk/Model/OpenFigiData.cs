/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// OpenFIGI data structure
    /// </summary>
    [DataContract(Name = "OpenFigiData")]
    public partial class OpenFigiData : IEquatable<OpenFigiData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenFigiData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OpenFigiData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenFigiData" /> class.
        /// </summary>
        /// <param name="figi">FIGI assigned to the instrument. (required).</param>
        /// <param name="name">Various attributes of the instrument.</param>
        /// <param name="ticker">Various attributes of the instrument.</param>
        /// <param name="exchangeCode">Exchange code of the desired instrument(s).</param>
        /// <param name="mic">ISO market identification code(MIC) of the desired instrument(s).</param>
        /// <param name="exchangeName">Exchange name of the desired instrument(s).</param>
        /// <param name="marketSector">Market sector description of the desired instrument(s).</param>
        /// <param name="generalSecurityType">Enum-like attributes of the instrument.</param>
        /// <param name="securityType">Enum-like attributes of the instrument.</param>
        /// <param name="securityDescription">Various attributes of the instrument.</param>
        /// <param name="compositeFigi">Various attributes of the instrument.</param>
        /// <param name="shareClassFigi">Various attributes of the instrument.</param>
        /// <param name="matchType">Type that the instrument matched against.</param>
        /// <param name="searchInput">Search input used to generate this response.</param>
        /// <param name="lusidInstrumentId">If an instrument with this FIGI exists, the LUID of that instrument in LUSID.</param>
        /// <param name="lusidInstrumentScope">If an instrument with this FIGI exists, the Scope of that instrument in LUSID.</param>
        public OpenFigiData(string figi = default(string), string name = default(string), string ticker = default(string), string exchangeCode = default(string), string mic = default(string), string exchangeName = default(string), string marketSector = default(string), string generalSecurityType = default(string), string securityType = default(string), string securityDescription = default(string), string compositeFigi = default(string), string shareClassFigi = default(string), string matchType = default(string), string searchInput = default(string), string lusidInstrumentId = default(string), string lusidInstrumentScope = default(string))
        {
            // to ensure "figi" is required (not null)
            if (figi == null)
            {
                throw new ArgumentNullException("figi is a required property for OpenFigiData and cannot be null");
            }
            this.Figi = figi;
            this.Name = name;
            this.Ticker = ticker;
            this.ExchangeCode = exchangeCode;
            this.Mic = mic;
            this.ExchangeName = exchangeName;
            this.MarketSector = marketSector;
            this.GeneralSecurityType = generalSecurityType;
            this.SecurityType = securityType;
            this.SecurityDescription = securityDescription;
            this.CompositeFigi = compositeFigi;
            this.ShareClassFigi = shareClassFigi;
            this.MatchType = matchType;
            this.SearchInput = searchInput;
            this.LusidInstrumentId = lusidInstrumentId;
            this.LusidInstrumentScope = lusidInstrumentScope;
        }

        /// <summary>
        /// FIGI assigned to the instrument.
        /// </summary>
        /// <value>FIGI assigned to the instrument.</value>
        [DataMember(Name = "figi", IsRequired = true, EmitDefaultValue = true)]
        public string Figi { get; set; }

        /// <summary>
        /// Various attributes of the instrument
        /// </summary>
        /// <value>Various attributes of the instrument</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Various attributes of the instrument
        /// </summary>
        /// <value>Various attributes of the instrument</value>
        [DataMember(Name = "ticker", EmitDefaultValue = true)]
        public string Ticker { get; set; }

        /// <summary>
        /// Exchange code of the desired instrument(s)
        /// </summary>
        /// <value>Exchange code of the desired instrument(s)</value>
        [DataMember(Name = "exchangeCode", EmitDefaultValue = true)]
        public string ExchangeCode { get; set; }

        /// <summary>
        /// ISO market identification code(MIC) of the desired instrument(s)
        /// </summary>
        /// <value>ISO market identification code(MIC) of the desired instrument(s)</value>
        [DataMember(Name = "mic", EmitDefaultValue = true)]
        public string Mic { get; set; }

        /// <summary>
        /// Exchange name of the desired instrument(s)
        /// </summary>
        /// <value>Exchange name of the desired instrument(s)</value>
        [DataMember(Name = "exchangeName", EmitDefaultValue = true)]
        public string ExchangeName { get; set; }

        /// <summary>
        /// Market sector description of the desired instrument(s)
        /// </summary>
        /// <value>Market sector description of the desired instrument(s)</value>
        [DataMember(Name = "marketSector", EmitDefaultValue = true)]
        public string MarketSector { get; set; }

        /// <summary>
        /// Enum-like attributes of the instrument
        /// </summary>
        /// <value>Enum-like attributes of the instrument</value>
        [DataMember(Name = "generalSecurityType", EmitDefaultValue = true)]
        public string GeneralSecurityType { get; set; }

        /// <summary>
        /// Enum-like attributes of the instrument
        /// </summary>
        /// <value>Enum-like attributes of the instrument</value>
        [DataMember(Name = "securityType", EmitDefaultValue = true)]
        public string SecurityType { get; set; }

        /// <summary>
        /// Various attributes of the instrument
        /// </summary>
        /// <value>Various attributes of the instrument</value>
        [DataMember(Name = "securityDescription", EmitDefaultValue = true)]
        public string SecurityDescription { get; set; }

        /// <summary>
        /// Various attributes of the instrument
        /// </summary>
        /// <value>Various attributes of the instrument</value>
        [DataMember(Name = "compositeFigi", EmitDefaultValue = true)]
        public string CompositeFigi { get; set; }

        /// <summary>
        /// Various attributes of the instrument
        /// </summary>
        /// <value>Various attributes of the instrument</value>
        [DataMember(Name = "shareClassFigi", EmitDefaultValue = true)]
        public string ShareClassFigi { get; set; }

        /// <summary>
        /// Type that the instrument matched against
        /// </summary>
        /// <value>Type that the instrument matched against</value>
        [DataMember(Name = "matchType", EmitDefaultValue = true)]
        public string MatchType { get; set; }

        /// <summary>
        /// Search input used to generate this response
        /// </summary>
        /// <value>Search input used to generate this response</value>
        [DataMember(Name = "searchInput", EmitDefaultValue = true)]
        public string SearchInput { get; set; }

        /// <summary>
        /// If an instrument with this FIGI exists, the LUID of that instrument in LUSID
        /// </summary>
        /// <value>If an instrument with this FIGI exists, the LUID of that instrument in LUSID</value>
        [DataMember(Name = "lusidInstrumentId", EmitDefaultValue = true)]
        public string LusidInstrumentId { get; set; }

        /// <summary>
        /// If an instrument with this FIGI exists, the Scope of that instrument in LUSID
        /// </summary>
        /// <value>If an instrument with this FIGI exists, the Scope of that instrument in LUSID</value>
        [DataMember(Name = "lusidInstrumentScope", EmitDefaultValue = true)]
        public string LusidInstrumentScope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenFigiData {\n");
            sb.Append("  Figi: ").Append(Figi).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  ExchangeCode: ").Append(ExchangeCode).Append("\n");
            sb.Append("  Mic: ").Append(Mic).Append("\n");
            sb.Append("  ExchangeName: ").Append(ExchangeName).Append("\n");
            sb.Append("  MarketSector: ").Append(MarketSector).Append("\n");
            sb.Append("  GeneralSecurityType: ").Append(GeneralSecurityType).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("  SecurityDescription: ").Append(SecurityDescription).Append("\n");
            sb.Append("  CompositeFigi: ").Append(CompositeFigi).Append("\n");
            sb.Append("  ShareClassFigi: ").Append(ShareClassFigi).Append("\n");
            sb.Append("  MatchType: ").Append(MatchType).Append("\n");
            sb.Append("  SearchInput: ").Append(SearchInput).Append("\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  LusidInstrumentScope: ").Append(LusidInstrumentScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenFigiData);
        }

        /// <summary>
        /// Returns true if OpenFigiData instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenFigiData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenFigiData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Figi == input.Figi ||
                    (this.Figi != null &&
                    this.Figi.Equals(input.Figi))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.ExchangeCode == input.ExchangeCode ||
                    (this.ExchangeCode != null &&
                    this.ExchangeCode.Equals(input.ExchangeCode))
                ) && 
                (
                    this.Mic == input.Mic ||
                    (this.Mic != null &&
                    this.Mic.Equals(input.Mic))
                ) && 
                (
                    this.ExchangeName == input.ExchangeName ||
                    (this.ExchangeName != null &&
                    this.ExchangeName.Equals(input.ExchangeName))
                ) && 
                (
                    this.MarketSector == input.MarketSector ||
                    (this.MarketSector != null &&
                    this.MarketSector.Equals(input.MarketSector))
                ) && 
                (
                    this.GeneralSecurityType == input.GeneralSecurityType ||
                    (this.GeneralSecurityType != null &&
                    this.GeneralSecurityType.Equals(input.GeneralSecurityType))
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    (this.SecurityType != null &&
                    this.SecurityType.Equals(input.SecurityType))
                ) && 
                (
                    this.SecurityDescription == input.SecurityDescription ||
                    (this.SecurityDescription != null &&
                    this.SecurityDescription.Equals(input.SecurityDescription))
                ) && 
                (
                    this.CompositeFigi == input.CompositeFigi ||
                    (this.CompositeFigi != null &&
                    this.CompositeFigi.Equals(input.CompositeFigi))
                ) && 
                (
                    this.ShareClassFigi == input.ShareClassFigi ||
                    (this.ShareClassFigi != null &&
                    this.ShareClassFigi.Equals(input.ShareClassFigi))
                ) && 
                (
                    this.MatchType == input.MatchType ||
                    (this.MatchType != null &&
                    this.MatchType.Equals(input.MatchType))
                ) && 
                (
                    this.SearchInput == input.SearchInput ||
                    (this.SearchInput != null &&
                    this.SearchInput.Equals(input.SearchInput))
                ) && 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.LusidInstrumentScope == input.LusidInstrumentScope ||
                    (this.LusidInstrumentScope != null &&
                    this.LusidInstrumentScope.Equals(input.LusidInstrumentScope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Figi != null)
                {
                    hashCode = (hashCode * 59) + this.Figi.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Ticker != null)
                {
                    hashCode = (hashCode * 59) + this.Ticker.GetHashCode();
                }
                if (this.ExchangeCode != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeCode.GetHashCode();
                }
                if (this.Mic != null)
                {
                    hashCode = (hashCode * 59) + this.Mic.GetHashCode();
                }
                if (this.ExchangeName != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeName.GetHashCode();
                }
                if (this.MarketSector != null)
                {
                    hashCode = (hashCode * 59) + this.MarketSector.GetHashCode();
                }
                if (this.GeneralSecurityType != null)
                {
                    hashCode = (hashCode * 59) + this.GeneralSecurityType.GetHashCode();
                }
                if (this.SecurityType != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityType.GetHashCode();
                }
                if (this.SecurityDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityDescription.GetHashCode();
                }
                if (this.CompositeFigi != null)
                {
                    hashCode = (hashCode * 59) + this.CompositeFigi.GetHashCode();
                }
                if (this.ShareClassFigi != null)
                {
                    hashCode = (hashCode * 59) + this.ShareClassFigi.GetHashCode();
                }
                if (this.MatchType != null)
                {
                    hashCode = (hashCode * 59) + this.MatchType.GetHashCode();
                }
                if (this.SearchInput != null)
                {
                    hashCode = (hashCode * 59) + this.SearchInput.GetHashCode();
                }
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.LusidInstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentScope.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
