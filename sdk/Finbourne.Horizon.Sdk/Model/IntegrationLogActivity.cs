/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// IntegrationLogActivity
    /// </summary>
    [DataContract(Name = "IntegrationLogActivity")]
    public partial class IntegrationLogActivity : IEquatable<IntegrationLogActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogActivity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IntegrationLogActivity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogActivity" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="resultingStatus">resultingStatus (required).</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="description">description.</param>
        public IntegrationLogActivity(DateTimeOffset timestamp = default(DateTimeOffset), string resultingStatus = default(string), string messageType = default(string), string description = default(string))
        {
            this.Timestamp = timestamp;
            // to ensure "resultingStatus" is required (not null)
            if (resultingStatus == null)
            {
                throw new ArgumentNullException("resultingStatus is a required property for IntegrationLogActivity and cannot be null");
            }
            this.ResultingStatus = resultingStatus;
            this.MessageType = messageType;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets ResultingStatus
        /// </summary>
        [DataMember(Name = "resultingStatus", IsRequired = true, EmitDefaultValue = true)]
        public string ResultingStatus { get; set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "messageType", EmitDefaultValue = true)]
        public string MessageType { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntegrationLogActivity {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ResultingStatus: ").Append(ResultingStatus).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntegrationLogActivity);
        }

        /// <summary>
        /// Returns true if IntegrationLogActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of IntegrationLogActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationLogActivity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.ResultingStatus == input.ResultingStatus ||
                    (this.ResultingStatus != null &&
                    this.ResultingStatus.Equals(input.ResultingStatus))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.ResultingStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ResultingStatus.GetHashCode();
                }
                if (this.MessageType != null)
                {
                    hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
