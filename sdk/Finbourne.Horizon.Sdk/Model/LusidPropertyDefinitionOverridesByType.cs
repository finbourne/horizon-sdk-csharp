/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// LusidPropertyDefinitionOverridesByType
    /// </summary>
    [DataContract(Name = "LusidPropertyDefinitionOverridesByType")]
    public partial class LusidPropertyDefinitionOverridesByType : IEquatable<LusidPropertyDefinitionOverridesByType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidPropertyDefinitionOverridesByType" /> class.
        /// </summary>
        /// <param name="displayNameOverride">displayNameOverride.</param>
        /// <param name="descriptionOverride">descriptionOverride.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="entitySubType">entitySubType.</param>
        public LusidPropertyDefinitionOverridesByType(string displayNameOverride = default(string), string descriptionOverride = default(string), string entityType = default(string), List<string> entitySubType = default(List<string>))
        {
            this.DisplayNameOverride = displayNameOverride;
            this.DescriptionOverride = descriptionOverride;
            this.EntityType = entityType;
            this.EntitySubType = entitySubType;
        }

        /// <summary>
        /// Gets or Sets DisplayNameOverride
        /// </summary>
        [DataMember(Name = "displayNameOverride", EmitDefaultValue = true)]
        public string DisplayNameOverride { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionOverride
        /// </summary>
        [DataMember(Name = "descriptionOverride", EmitDefaultValue = true)]
        public string DescriptionOverride { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets EntitySubType
        /// </summary>
        [DataMember(Name = "entitySubType", EmitDefaultValue = true)]
        public List<string> EntitySubType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LusidPropertyDefinitionOverridesByType {\n");
            sb.Append("  DisplayNameOverride: ").Append(DisplayNameOverride).Append("\n");
            sb.Append("  DescriptionOverride: ").Append(DescriptionOverride).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntitySubType: ").Append(EntitySubType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LusidPropertyDefinitionOverridesByType);
        }

        /// <summary>
        /// Returns true if LusidPropertyDefinitionOverridesByType instances are equal
        /// </summary>
        /// <param name="input">Instance of LusidPropertyDefinitionOverridesByType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LusidPropertyDefinitionOverridesByType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayNameOverride == input.DisplayNameOverride ||
                    (this.DisplayNameOverride != null &&
                    this.DisplayNameOverride.Equals(input.DisplayNameOverride))
                ) && 
                (
                    this.DescriptionOverride == input.DescriptionOverride ||
                    (this.DescriptionOverride != null &&
                    this.DescriptionOverride.Equals(input.DescriptionOverride))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntitySubType == input.EntitySubType ||
                    this.EntitySubType != null &&
                    input.EntitySubType != null &&
                    this.EntitySubType.SequenceEqual(input.EntitySubType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayNameOverride != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayNameOverride.GetHashCode();
                }
                if (this.DescriptionOverride != null)
                {
                    hashCode = (hashCode * 59) + this.DescriptionOverride.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.EntitySubType != null)
                {
                    hashCode = (hashCode * 59) + this.EntitySubType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
