/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Information about the LUSID entity this data can be used with
    /// </summary>
    [DataContract(Name = "LusidEntity")]
    public partial class LusidEntity : IEquatable<LusidEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LusidEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidEntity" /> class.
        /// </summary>
        /// <param name="entityType">The entity type (required).</param>
        /// <param name="entityTypeDisplayName">The display name for the entity type. (required).</param>
        /// <param name="entitySubType">The entity sub-type.</param>
        /// <param name="entitySubTypeDisplayName">Display name for the entity sub-type.</param>
        public LusidEntity(string entityType = default(string), string entityTypeDisplayName = default(string), string entitySubType = default(string), string entitySubTypeDisplayName = default(string))
        {
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new ArgumentNullException("entityType is a required property for LusidEntity and cannot be null");
            }
            this.EntityType = entityType;
            // to ensure "entityTypeDisplayName" is required (not null)
            if (entityTypeDisplayName == null)
            {
                throw new ArgumentNullException("entityTypeDisplayName is a required property for LusidEntity and cannot be null");
            }
            this.EntityTypeDisplayName = entityTypeDisplayName;
            this.EntitySubType = entitySubType;
            this.EntitySubTypeDisplayName = entitySubTypeDisplayName;
        }

        /// <summary>
        /// The entity type
        /// </summary>
        /// <value>The entity type</value>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// The display name for the entity type.
        /// </summary>
        /// <value>The display name for the entity type.</value>
        [DataMember(Name = "entityTypeDisplayName", IsRequired = true, EmitDefaultValue = true)]
        public string EntityTypeDisplayName { get; set; }

        /// <summary>
        /// The entity sub-type
        /// </summary>
        /// <value>The entity sub-type</value>
        [DataMember(Name = "entitySubType", EmitDefaultValue = true)]
        public string EntitySubType { get; set; }

        /// <summary>
        /// Display name for the entity sub-type
        /// </summary>
        /// <value>Display name for the entity sub-type</value>
        [DataMember(Name = "entitySubTypeDisplayName", EmitDefaultValue = true)]
        public string EntitySubTypeDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LusidEntity {\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityTypeDisplayName: ").Append(EntityTypeDisplayName).Append("\n");
            sb.Append("  EntitySubType: ").Append(EntitySubType).Append("\n");
            sb.Append("  EntitySubTypeDisplayName: ").Append(EntitySubTypeDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LusidEntity);
        }

        /// <summary>
        /// Returns true if LusidEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of LusidEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LusidEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityTypeDisplayName == input.EntityTypeDisplayName ||
                    (this.EntityTypeDisplayName != null &&
                    this.EntityTypeDisplayName.Equals(input.EntityTypeDisplayName))
                ) && 
                (
                    this.EntitySubType == input.EntitySubType ||
                    (this.EntitySubType != null &&
                    this.EntitySubType.Equals(input.EntitySubType))
                ) && 
                (
                    this.EntitySubTypeDisplayName == input.EntitySubTypeDisplayName ||
                    (this.EntitySubTypeDisplayName != null &&
                    this.EntitySubTypeDisplayName.Equals(input.EntitySubTypeDisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.EntityTypeDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.EntityTypeDisplayName.GetHashCode();
                }
                if (this.EntitySubType != null)
                {
                    hashCode = (hashCode * 59) + this.EntitySubType.GetHashCode();
                }
                if (this.EntitySubTypeDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.EntitySubTypeDisplayName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntityType (string) minLength
            if (this.EntityType != null && this.EntityType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be greater than 1.", new [] { "EntityType" });
            }

            // EntityTypeDisplayName (string) minLength
            if (this.EntityTypeDisplayName != null && this.EntityTypeDisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityTypeDisplayName, length must be greater than 1.", new [] { "EntityTypeDisplayName" });
            }

            yield break;
        }
    }
}
