/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// CreateInstanceRequest
    /// </summary>
    [DataContract(Name = "CreateInstanceRequest")]
    public partial class CreateInstanceRequest : IEquatable<CreateInstanceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInstanceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateInstanceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInstanceRequest" /> class.
        /// </summary>
        /// <param name="instanceOptionalProps">instanceOptionalProps.</param>
        /// <param name="integrationType">integrationType (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="enabled">enabled (required).</param>
        /// <param name="triggers">triggers (required).</param>
        /// <param name="details">details (required).</param>
        public CreateInstanceRequest(Dictionary<string, InstancePropertyDefinitionOverrides> instanceOptionalProps = default(Dictionary<string, InstancePropertyDefinitionOverrides>), string integrationType = default(string), string name = default(string), string description = default(string), bool enabled = default(bool), List<Trigger> triggers = default(List<Trigger>), Object details = default(Object))
        {
            // to ensure "integrationType" is required (not null)
            if (integrationType == null)
            {
                throw new ArgumentNullException("integrationType is a required property for CreateInstanceRequest and cannot be null");
            }
            this.IntegrationType = integrationType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateInstanceRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CreateInstanceRequest and cannot be null");
            }
            this.Description = description;
            this.Enabled = enabled;
            // to ensure "triggers" is required (not null)
            if (triggers == null)
            {
                throw new ArgumentNullException("triggers is a required property for CreateInstanceRequest and cannot be null");
            }
            this.Triggers = triggers;
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new ArgumentNullException("details is a required property for CreateInstanceRequest and cannot be null");
            }
            this.Details = details;
            this.InstanceOptionalProps = instanceOptionalProps;
        }

        /// <summary>
        /// Gets or Sets InstanceOptionalProps
        /// </summary>
        [DataMember(Name = "instanceOptionalProps", EmitDefaultValue = true)]
        public Dictionary<string, InstancePropertyDefinitionOverrides> InstanceOptionalProps { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationType
        /// </summary>
        [DataMember(Name = "integrationType", IsRequired = true, EmitDefaultValue = true)]
        public string IntegrationType { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Triggers
        /// </summary>
        [DataMember(Name = "triggers", IsRequired = true, EmitDefaultValue = true)]
        public List<Trigger> Triggers { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", IsRequired = true, EmitDefaultValue = true)]
        public Object Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateInstanceRequest {\n");
            sb.Append("  InstanceOptionalProps: ").Append(InstanceOptionalProps).Append("\n");
            sb.Append("  IntegrationType: ").Append(IntegrationType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateInstanceRequest);
        }

        /// <summary>
        /// Returns true if CreateInstanceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateInstanceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateInstanceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstanceOptionalProps == input.InstanceOptionalProps ||
                    this.InstanceOptionalProps != null &&
                    input.InstanceOptionalProps != null &&
                    this.InstanceOptionalProps.SequenceEqual(input.InstanceOptionalProps)
                ) && 
                (
                    this.IntegrationType == input.IntegrationType ||
                    (this.IntegrationType != null &&
                    this.IntegrationType.Equals(input.IntegrationType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.Triggers == input.Triggers ||
                    this.Triggers != null &&
                    input.Triggers != null &&
                    this.Triggers.SequenceEqual(input.Triggers)
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstanceOptionalProps != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceOptionalProps.GetHashCode();
                }
                if (this.IntegrationType != null)
                {
                    hashCode = (hashCode * 59) + this.IntegrationType.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.Triggers != null)
                {
                    hashCode = (hashCode * 59) + this.Triggers.GetHashCode();
                }
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
