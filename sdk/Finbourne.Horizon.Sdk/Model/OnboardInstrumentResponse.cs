/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Simplified structure converted from the LUSID UpsertInstrumentReponse
    /// </summary>
    [DataContract(Name = "OnboardInstrumentResponse")]
    public partial class OnboardInstrumentResponse : IEquatable<OnboardInstrumentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardInstrumentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnboardInstrumentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardInstrumentResponse" /> class.
        /// </summary>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="values">The instruments which have been successfully updated or created. (required).</param>
        /// <param name="failed">The instruments that could not be updated or created or were left unchanged without error along with a reason for their failure. (required).</param>
        public OnboardInstrumentResponse(string href = default(string), List<string> values = default(List<string>), Dictionary<string, string> failed = default(Dictionary<string, string>))
        {
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for OnboardInstrumentResponse and cannot be null");
            }
            this.Values = values;
            // to ensure "failed" is required (not null)
            if (failed == null)
            {
                throw new ArgumentNullException("failed is a required property for OnboardInstrumentResponse and cannot be null");
            }
            this.Failed = failed;
            this.Href = href;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// The instruments which have been successfully updated or created.
        /// </summary>
        /// <value>The instruments which have been successfully updated or created.</value>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Values { get; set; }

        /// <summary>
        /// The instruments that could not be updated or created or were left unchanged without error along with a reason for their failure.
        /// </summary>
        /// <value>The instruments that could not be updated or created or were left unchanged without error along with a reason for their failure.</value>
        [DataMember(Name = "failed", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Failed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OnboardInstrumentResponse {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnboardInstrumentResponse);
        }

        /// <summary>
        /// Returns true if OnboardInstrumentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OnboardInstrumentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnboardInstrumentResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.Failed == input.Failed ||
                    this.Failed != null &&
                    input.Failed != null &&
                    this.Failed.SequenceEqual(input.Failed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                if (this.Failed != null)
                {
                    hashCode = (hashCode * 59) + this.Failed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
