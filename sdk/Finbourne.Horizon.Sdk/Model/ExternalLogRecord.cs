/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// ExternalLogRecord
    /// </summary>
    [DataContract(Name = "ExternalLogRecord")]
    public partial class ExternalLogRecord : IEquatable<ExternalLogRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalLogRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalLogRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalLogRecord" /> class.
        /// </summary>
        /// <param name="logid">logid (required).</param>
        /// <param name="parentlogid">parentlogid.</param>
        /// <param name="loglevel">loglevel (required).</param>
        /// <param name="logstatus">logstatus (required).</param>
        /// <param name="sourcerecordtype">sourcerecordtype.</param>
        /// <param name="sourceprimaryidtype">sourceprimaryidtype.</param>
        /// <param name="sourceprimaryidvalue">sourceprimaryidvalue.</param>
        /// <param name="targetrecordtype">targetrecordtype.</param>
        /// <param name="targetrecordaction">targetrecordaction.</param>
        /// <param name="targetprimaryidtype">targetprimaryidtype.</param>
        /// <param name="targetprimaryidvalue">targetprimaryidvalue.</param>
        /// <param name="message">message.</param>
        /// <param name="messagetype">messagetype.</param>
        /// <param name="timestamp">timestamp (required).</param>
        public ExternalLogRecord(long logid = default(long), long? parentlogid = default(long?), string loglevel = default(string), string logstatus = default(string), string sourcerecordtype = default(string), string sourceprimaryidtype = default(string), string sourceprimaryidvalue = default(string), string targetrecordtype = default(string), string targetrecordaction = default(string), string targetprimaryidtype = default(string), string targetprimaryidvalue = default(string), string message = default(string), string messagetype = default(string), string timestamp = default(string))
        {
            this.Logid = logid;
            // to ensure "loglevel" is required (not null)
            if (loglevel == null)
            {
                throw new ArgumentNullException("loglevel is a required property for ExternalLogRecord and cannot be null");
            }
            this.Loglevel = loglevel;
            // to ensure "logstatus" is required (not null)
            if (logstatus == null)
            {
                throw new ArgumentNullException("logstatus is a required property for ExternalLogRecord and cannot be null");
            }
            this.Logstatus = logstatus;
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new ArgumentNullException("timestamp is a required property for ExternalLogRecord and cannot be null");
            }
            this.Timestamp = timestamp;
            this.Parentlogid = parentlogid;
            this.Sourcerecordtype = sourcerecordtype;
            this.Sourceprimaryidtype = sourceprimaryidtype;
            this.Sourceprimaryidvalue = sourceprimaryidvalue;
            this.Targetrecordtype = targetrecordtype;
            this.Targetrecordaction = targetrecordaction;
            this.Targetprimaryidtype = targetprimaryidtype;
            this.Targetprimaryidvalue = targetprimaryidvalue;
            this.Message = message;
            this.Messagetype = messagetype;
        }

        /// <summary>
        /// Gets or Sets Logid
        /// </summary>
        [DataMember(Name = "logid", IsRequired = true, EmitDefaultValue = true)]
        public long Logid { get; set; }

        /// <summary>
        /// Gets or Sets Parentlogid
        /// </summary>
        [DataMember(Name = "parentlogid", EmitDefaultValue = true)]
        public long? Parentlogid { get; set; }

        /// <summary>
        /// Gets or Sets Loglevel
        /// </summary>
        [DataMember(Name = "loglevel", IsRequired = true, EmitDefaultValue = true)]
        public string Loglevel { get; set; }

        /// <summary>
        /// Gets or Sets Logstatus
        /// </summary>
        [DataMember(Name = "logstatus", IsRequired = true, EmitDefaultValue = true)]
        public string Logstatus { get; set; }

        /// <summary>
        /// Gets or Sets Sourcerecordtype
        /// </summary>
        [DataMember(Name = "sourcerecordtype", EmitDefaultValue = true)]
        public string Sourcerecordtype { get; set; }

        /// <summary>
        /// Gets or Sets Sourceprimaryidtype
        /// </summary>
        [DataMember(Name = "sourceprimaryidtype", EmitDefaultValue = true)]
        public string Sourceprimaryidtype { get; set; }

        /// <summary>
        /// Gets or Sets Sourceprimaryidvalue
        /// </summary>
        [DataMember(Name = "sourceprimaryidvalue", EmitDefaultValue = true)]
        public string Sourceprimaryidvalue { get; set; }

        /// <summary>
        /// Gets or Sets Targetrecordtype
        /// </summary>
        [DataMember(Name = "targetrecordtype", EmitDefaultValue = true)]
        public string Targetrecordtype { get; set; }

        /// <summary>
        /// Gets or Sets Targetrecordaction
        /// </summary>
        [DataMember(Name = "targetrecordaction", EmitDefaultValue = true)]
        public string Targetrecordaction { get; set; }

        /// <summary>
        /// Gets or Sets Targetprimaryidtype
        /// </summary>
        [DataMember(Name = "targetprimaryidtype", EmitDefaultValue = true)]
        public string Targetprimaryidtype { get; set; }

        /// <summary>
        /// Gets or Sets Targetprimaryidvalue
        /// </summary>
        [DataMember(Name = "targetprimaryidvalue", EmitDefaultValue = true)]
        public string Targetprimaryidvalue { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Messagetype
        /// </summary>
        [DataMember(Name = "messagetype", EmitDefaultValue = true)]
        public string Messagetype { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalLogRecord {\n");
            sb.Append("  Logid: ").Append(Logid).Append("\n");
            sb.Append("  Parentlogid: ").Append(Parentlogid).Append("\n");
            sb.Append("  Loglevel: ").Append(Loglevel).Append("\n");
            sb.Append("  Logstatus: ").Append(Logstatus).Append("\n");
            sb.Append("  Sourcerecordtype: ").Append(Sourcerecordtype).Append("\n");
            sb.Append("  Sourceprimaryidtype: ").Append(Sourceprimaryidtype).Append("\n");
            sb.Append("  Sourceprimaryidvalue: ").Append(Sourceprimaryidvalue).Append("\n");
            sb.Append("  Targetrecordtype: ").Append(Targetrecordtype).Append("\n");
            sb.Append("  Targetrecordaction: ").Append(Targetrecordaction).Append("\n");
            sb.Append("  Targetprimaryidtype: ").Append(Targetprimaryidtype).Append("\n");
            sb.Append("  Targetprimaryidvalue: ").Append(Targetprimaryidvalue).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Messagetype: ").Append(Messagetype).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalLogRecord);
        }

        /// <summary>
        /// Returns true if ExternalLogRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalLogRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalLogRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Logid == input.Logid ||
                    this.Logid.Equals(input.Logid)
                ) && 
                (
                    this.Parentlogid == input.Parentlogid ||
                    (this.Parentlogid != null &&
                    this.Parentlogid.Equals(input.Parentlogid))
                ) && 
                (
                    this.Loglevel == input.Loglevel ||
                    (this.Loglevel != null &&
                    this.Loglevel.Equals(input.Loglevel))
                ) && 
                (
                    this.Logstatus == input.Logstatus ||
                    (this.Logstatus != null &&
                    this.Logstatus.Equals(input.Logstatus))
                ) && 
                (
                    this.Sourcerecordtype == input.Sourcerecordtype ||
                    (this.Sourcerecordtype != null &&
                    this.Sourcerecordtype.Equals(input.Sourcerecordtype))
                ) && 
                (
                    this.Sourceprimaryidtype == input.Sourceprimaryidtype ||
                    (this.Sourceprimaryidtype != null &&
                    this.Sourceprimaryidtype.Equals(input.Sourceprimaryidtype))
                ) && 
                (
                    this.Sourceprimaryidvalue == input.Sourceprimaryidvalue ||
                    (this.Sourceprimaryidvalue != null &&
                    this.Sourceprimaryidvalue.Equals(input.Sourceprimaryidvalue))
                ) && 
                (
                    this.Targetrecordtype == input.Targetrecordtype ||
                    (this.Targetrecordtype != null &&
                    this.Targetrecordtype.Equals(input.Targetrecordtype))
                ) && 
                (
                    this.Targetrecordaction == input.Targetrecordaction ||
                    (this.Targetrecordaction != null &&
                    this.Targetrecordaction.Equals(input.Targetrecordaction))
                ) && 
                (
                    this.Targetprimaryidtype == input.Targetprimaryidtype ||
                    (this.Targetprimaryidtype != null &&
                    this.Targetprimaryidtype.Equals(input.Targetprimaryidtype))
                ) && 
                (
                    this.Targetprimaryidvalue == input.Targetprimaryidvalue ||
                    (this.Targetprimaryidvalue != null &&
                    this.Targetprimaryidvalue.Equals(input.Targetprimaryidvalue))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Messagetype == input.Messagetype ||
                    (this.Messagetype != null &&
                    this.Messagetype.Equals(input.Messagetype))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Logid.GetHashCode();
                if (this.Parentlogid != null)
                {
                    hashCode = (hashCode * 59) + this.Parentlogid.GetHashCode();
                }
                if (this.Loglevel != null)
                {
                    hashCode = (hashCode * 59) + this.Loglevel.GetHashCode();
                }
                if (this.Logstatus != null)
                {
                    hashCode = (hashCode * 59) + this.Logstatus.GetHashCode();
                }
                if (this.Sourcerecordtype != null)
                {
                    hashCode = (hashCode * 59) + this.Sourcerecordtype.GetHashCode();
                }
                if (this.Sourceprimaryidtype != null)
                {
                    hashCode = (hashCode * 59) + this.Sourceprimaryidtype.GetHashCode();
                }
                if (this.Sourceprimaryidvalue != null)
                {
                    hashCode = (hashCode * 59) + this.Sourceprimaryidvalue.GetHashCode();
                }
                if (this.Targetrecordtype != null)
                {
                    hashCode = (hashCode * 59) + this.Targetrecordtype.GetHashCode();
                }
                if (this.Targetrecordaction != null)
                {
                    hashCode = (hashCode * 59) + this.Targetrecordaction.GetHashCode();
                }
                if (this.Targetprimaryidtype != null)
                {
                    hashCode = (hashCode * 59) + this.Targetprimaryidtype.GetHashCode();
                }
                if (this.Targetprimaryidvalue != null)
                {
                    hashCode = (hashCode * 59) + this.Targetprimaryidvalue.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Messagetype != null)
                {
                    hashCode = (hashCode * 59) + this.Messagetype.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Loglevel (string) maxLength
            if (this.Loglevel != null && this.Loglevel.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Loglevel, length must be less than 64.", new [] { "Loglevel" });
            }

            // Loglevel (string) minLength
            if (this.Loglevel != null && this.Loglevel.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Loglevel, length must be greater than 0.", new [] { "Loglevel" });
            }

            // Logstatus (string) maxLength
            if (this.Logstatus != null && this.Logstatus.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Logstatus, length must be less than 64.", new [] { "Logstatus" });
            }

            // Logstatus (string) minLength
            if (this.Logstatus != null && this.Logstatus.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Logstatus, length must be greater than 0.", new [] { "Logstatus" });
            }

            // Sourcerecordtype (string) maxLength
            if (this.Sourcerecordtype != null && this.Sourcerecordtype.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sourcerecordtype, length must be less than 128.", new [] { "Sourcerecordtype" });
            }

            // Sourcerecordtype (string) minLength
            if (this.Sourcerecordtype != null && this.Sourcerecordtype.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sourcerecordtype, length must be greater than 0.", new [] { "Sourcerecordtype" });
            }

            // Sourceprimaryidtype (string) maxLength
            if (this.Sourceprimaryidtype != null && this.Sourceprimaryidtype.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sourceprimaryidtype, length must be less than 128.", new [] { "Sourceprimaryidtype" });
            }

            // Sourceprimaryidtype (string) minLength
            if (this.Sourceprimaryidtype != null && this.Sourceprimaryidtype.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sourceprimaryidtype, length must be greater than 0.", new [] { "Sourceprimaryidtype" });
            }

            // Sourceprimaryidvalue (string) maxLength
            if (this.Sourceprimaryidvalue != null && this.Sourceprimaryidvalue.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sourceprimaryidvalue, length must be less than 128.", new [] { "Sourceprimaryidvalue" });
            }

            // Sourceprimaryidvalue (string) minLength
            if (this.Sourceprimaryidvalue != null && this.Sourceprimaryidvalue.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sourceprimaryidvalue, length must be greater than 0.", new [] { "Sourceprimaryidvalue" });
            }

            // Targetrecordtype (string) maxLength
            if (this.Targetrecordtype != null && this.Targetrecordtype.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Targetrecordtype, length must be less than 128.", new [] { "Targetrecordtype" });
            }

            // Targetrecordtype (string) minLength
            if (this.Targetrecordtype != null && this.Targetrecordtype.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Targetrecordtype, length must be greater than 0.", new [] { "Targetrecordtype" });
            }

            // Targetrecordaction (string) maxLength
            if (this.Targetrecordaction != null && this.Targetrecordaction.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Targetrecordaction, length must be less than 128.", new [] { "Targetrecordaction" });
            }

            // Targetrecordaction (string) minLength
            if (this.Targetrecordaction != null && this.Targetrecordaction.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Targetrecordaction, length must be greater than 0.", new [] { "Targetrecordaction" });
            }

            // Targetprimaryidtype (string) maxLength
            if (this.Targetprimaryidtype != null && this.Targetprimaryidtype.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Targetprimaryidtype, length must be less than 128.", new [] { "Targetprimaryidtype" });
            }

            // Targetprimaryidtype (string) minLength
            if (this.Targetprimaryidtype != null && this.Targetprimaryidtype.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Targetprimaryidtype, length must be greater than 0.", new [] { "Targetprimaryidtype" });
            }

            // Targetprimaryidvalue (string) maxLength
            if (this.Targetprimaryidvalue != null && this.Targetprimaryidvalue.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Targetprimaryidvalue, length must be less than 128.", new [] { "Targetprimaryidvalue" });
            }

            // Targetprimaryidvalue (string) minLength
            if (this.Targetprimaryidvalue != null && this.Targetprimaryidvalue.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Targetprimaryidvalue, length must be greater than 0.", new [] { "Targetprimaryidvalue" });
            }

            // Message (string) maxLength
            if (this.Message != null && this.Message.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 1024.", new [] { "Message" });
            }

            // Message (string) minLength
            if (this.Message != null && this.Message.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be greater than 0.", new [] { "Message" });
            }

            // Messagetype (string) maxLength
            if (this.Messagetype != null && this.Messagetype.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Messagetype, length must be less than 64.", new [] { "Messagetype" });
            }

            // Messagetype (string) minLength
            if (this.Messagetype != null && this.Messagetype.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Messagetype, length must be greater than 0.", new [] { "Messagetype" });
            }

            // Timestamp (string) maxLength
            if (this.Timestamp != null && this.Timestamp.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timestamp, length must be less than 64.", new [] { "Timestamp" });
            }

            // Timestamp (string) minLength
            if (this.Timestamp != null && this.Timestamp.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timestamp, length must be greater than 0.", new [] { "Timestamp" });
            }

            yield break;
        }
    }
}
