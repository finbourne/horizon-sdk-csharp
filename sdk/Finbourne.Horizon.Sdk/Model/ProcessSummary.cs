/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Completed event details
    /// </summary>
    [DataContract(Name = "ProcessSummary")]
    public partial class ProcessSummary : IEquatable<ProcessSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessSummary" /> class.
        /// </summary>
        /// <param name="endTime">endTime.</param>
        /// <param name="category">category.</param>
        /// <param name="status">status (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="rows">rows (required).</param>
        /// <param name="fileDetails">fileDetails.</param>
        public ProcessSummary(DateTimeOffset? endTime = default(DateTimeOffset?), string category = default(string), string status = default(string), string message = default(string), RowDetails rows = default(RowDetails), List<FileDetails> fileDetails = default(List<FileDetails>))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ProcessSummary and cannot be null");
            }
            this.Status = status;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for ProcessSummary and cannot be null");
            }
            this.Message = message;
            // to ensure "rows" is required (not null)
            if (rows == null)
            {
                throw new ArgumentNullException("rows is a required property for ProcessSummary and cannot be null");
            }
            this.Rows = rows;
            this.EndTime = endTime;
            this.Category = category;
            this.FileDetails = fileDetails;
        }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = true)]
        public DateTimeOffset? EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name = "rows", IsRequired = true, EmitDefaultValue = true)]
        public RowDetails Rows { get; set; }

        /// <summary>
        /// Gets or Sets FileDetails
        /// </summary>
        [DataMember(Name = "fileDetails", EmitDefaultValue = true)]
        public List<FileDetails> FileDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessSummary {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  FileDetails: ").Append(FileDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessSummary);
        }

        /// <summary>
        /// Returns true if ProcessSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Rows == input.Rows ||
                    (this.Rows != null &&
                    this.Rows.Equals(input.Rows))
                ) && 
                (
                    this.FileDetails == input.FileDetails ||
                    this.FileDetails != null &&
                    input.FileDetails != null &&
                    this.FileDetails.SequenceEqual(input.FileDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Rows != null)
                {
                    hashCode = (hashCode * 59) + this.Rows.GetHashCode();
                }
                if (this.FileDetails != null)
                {
                    hashCode = (hashCode * 59) + this.FileDetails.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
