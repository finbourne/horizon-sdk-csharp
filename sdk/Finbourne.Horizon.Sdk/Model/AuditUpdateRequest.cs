/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// An incoming request for a Horizon Update Event
    /// </summary>
    [DataContract(Name = "AuditUpdateRequest")]
    public partial class AuditUpdateRequest : IEquatable<AuditUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditUpdateRequest" /> class.
        /// </summary>
        /// <param name="id">A unique ID identifiying the source of the event (required).</param>
        /// <param name="userId">A unique ID identifiying who owns the schedule (required).</param>
        /// <param name="schedulerRunId">The GUID of the schedule run (required).</param>
        /// <param name="startTime">When the run was started in UTC (required).</param>
        /// <param name="message">A descriptive message to accompany the status (required).</param>
        /// <param name="processNameOverride">Optional Name for how the process appears in Data Feed Monitoring.</param>
        public AuditUpdateRequest(string id = default(string), string userId = default(string), Guid schedulerRunId = default(Guid), DateTimeOffset startTime = default(DateTimeOffset), string message = default(string), string processNameOverride = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AuditUpdateRequest and cannot be null");
            }
            this.Id = id;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for AuditUpdateRequest and cannot be null");
            }
            this.UserId = userId;
            this.SchedulerRunId = schedulerRunId;
            this.StartTime = startTime;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for AuditUpdateRequest and cannot be null");
            }
            this.Message = message;
            this.ProcessNameOverride = processNameOverride;
        }

        /// <summary>
        /// A unique ID identifiying the source of the event
        /// </summary>
        /// <value>A unique ID identifiying the source of the event</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A unique ID identifiying who owns the schedule
        /// </summary>
        /// <value>A unique ID identifiying who owns the schedule</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// The GUID of the schedule run
        /// </summary>
        /// <value>The GUID of the schedule run</value>
        [DataMember(Name = "schedulerRunId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SchedulerRunId { get; set; }

        /// <summary>
        /// When the run was started in UTC
        /// </summary>
        /// <value>When the run was started in UTC</value>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// A descriptive message to accompany the status
        /// </summary>
        /// <value>A descriptive message to accompany the status</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Optional Name for how the process appears in Data Feed Monitoring
        /// </summary>
        /// <value>Optional Name for how the process appears in Data Feed Monitoring</value>
        [DataMember(Name = "processNameOverride", EmitDefaultValue = true)]
        public string ProcessNameOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuditUpdateRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  SchedulerRunId: ").Append(SchedulerRunId).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ProcessNameOverride: ").Append(ProcessNameOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditUpdateRequest);
        }

        /// <summary>
        /// Returns true if AuditUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditUpdateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.SchedulerRunId == input.SchedulerRunId ||
                    (this.SchedulerRunId != null &&
                    this.SchedulerRunId.Equals(input.SchedulerRunId))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.ProcessNameOverride == input.ProcessNameOverride ||
                    (this.ProcessNameOverride != null &&
                    this.ProcessNameOverride.Equals(input.ProcessNameOverride))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.SchedulerRunId != null)
                {
                    hashCode = (hashCode * 59) + this.SchedulerRunId.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.ProcessNameOverride != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessNameOverride.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
