/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Horizon.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Horizon.Sdk.Model
{
    /// <summary>
    /// Denormalised information about vendors, the products they provide and the LUSID entity types they can be used to populate.
    /// </summary>
    [DataContract(Name = "VendorProduct")]
    public partial class VendorProduct : IEquatable<VendorProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VendorProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorProduct" /> class.
        /// </summary>
        /// <param name="vendorName">vendorName (required).</param>
        /// <param name="productName">productName (required).</param>
        /// <param name="vendorProductKey">vendorProductKey (required).</param>
        /// <param name="lusidEntity">lusidEntity (required).</param>
        public VendorProduct(string vendorName = default(string), string productName = default(string), string vendorProductKey = default(string), LusidEntity lusidEntity = default(LusidEntity))
        {
            // to ensure "vendorName" is required (not null)
            if (vendorName == null)
            {
                throw new ArgumentNullException("vendorName is a required property for VendorProduct and cannot be null");
            }
            this.VendorName = vendorName;
            // to ensure "productName" is required (not null)
            if (productName == null)
            {
                throw new ArgumentNullException("productName is a required property for VendorProduct and cannot be null");
            }
            this.ProductName = productName;
            // to ensure "vendorProductKey" is required (not null)
            if (vendorProductKey == null)
            {
                throw new ArgumentNullException("vendorProductKey is a required property for VendorProduct and cannot be null");
            }
            this.VendorProductKey = vendorProductKey;
            // to ensure "lusidEntity" is required (not null)
            if (lusidEntity == null)
            {
                throw new ArgumentNullException("lusidEntity is a required property for VendorProduct and cannot be null");
            }
            this.LusidEntity = lusidEntity;
        }

        /// <summary>
        /// Gets or Sets VendorName
        /// </summary>
        [DataMember(Name = "vendorName", IsRequired = true, EmitDefaultValue = true)]
        public string VendorName { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name = "productName", IsRequired = true, EmitDefaultValue = true)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets VendorProductKey
        /// </summary>
        [DataMember(Name = "vendorProductKey", IsRequired = true, EmitDefaultValue = true)]
        public string VendorProductKey { get; set; }

        /// <summary>
        /// Gets or Sets LusidEntity
        /// </summary>
        [DataMember(Name = "lusidEntity", IsRequired = true, EmitDefaultValue = true)]
        public LusidEntity LusidEntity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorProduct {\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  VendorProductKey: ").Append(VendorProductKey).Append("\n");
            sb.Append("  LusidEntity: ").Append(LusidEntity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorProduct);
        }

        /// <summary>
        /// Returns true if VendorProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorProduct input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VendorName == input.VendorName ||
                    (this.VendorName != null &&
                    this.VendorName.Equals(input.VendorName))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.VendorProductKey == input.VendorProductKey ||
                    (this.VendorProductKey != null &&
                    this.VendorProductKey.Equals(input.VendorProductKey))
                ) && 
                (
                    this.LusidEntity == input.LusidEntity ||
                    (this.LusidEntity != null &&
                    this.LusidEntity.Equals(input.LusidEntity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VendorName != null)
                {
                    hashCode = (hashCode * 59) + this.VendorName.GetHashCode();
                }
                if (this.ProductName != null)
                {
                    hashCode = (hashCode * 59) + this.ProductName.GetHashCode();
                }
                if (this.VendorProductKey != null)
                {
                    hashCode = (hashCode * 59) + this.VendorProductKey.GetHashCode();
                }
                if (this.LusidEntity != null)
                {
                    hashCode = (hashCode * 59) + this.LusidEntity.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
